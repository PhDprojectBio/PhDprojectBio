
#Ocean provinces are assigned and correspondence with contours is writen in the field matchContours.
rm(i,x,a, mn, mx,setone,settwo,y)
for (i in 1:length(namesShallowDeep)){ 
  mn <- 0
  mx <- 500
  while (mn < 6000){
    setone <- get(gsub(" ","",paste(namesShallowDeep[i],"_mkd_",mn,"_",mx)))
    
    #Assigning new fields
    if(nrow(setone) > 0){
      setone$matchContour <- "pendmatch" #to see if there is any record without classification afterwards
      
      if (i < 27){ 
        setone$oProvince <- "epipelagic and mesopelagic" #setting the oceanic province
        
        if (mn == 0){
          setone$matchContour <- "matchShallow"
          
          for(a in 1:nrow(setone)){
            if(setone$depth[a] >= 500 & !is.na(setone$depth[a])){
              setone$matchContour[a] <- "diffMatch"  }}}

         #merging into one datatable with the new field contours
          if (mn > 0){
          setone$matchContour <- "probPlanktonShallowSet"   }}
      
      if(i > 26){ 
          #setting the oceanic province        
            if(mn == 0){setone$oProvince <- "epipelagic and mesopelagic"}
            if(mn == 500){setone$oProvince <- "mesopelagic"}
            if(mn >= 1000 & mn < 4000){setone$oProvince <- "bathypelagic"}
            if(mn >= 4000){setone$oProvince <- "abyssopelagic"}

          if (mn == 0){
          setone$matchContour <- "shallowFromDeepSet" }
        
          #merging into one datatable with the new field contours
        
          if (mn > 0){setone$matchContour <- "matchDeep" 
            for(a in 1:nrow(setone)){
              if((setone$depth[a] >= 0 & setone$depth[a] < setone$minContour[a]) & !is.na(setone$depth[a]) & !is.na(setone$minContour[a])){
                setone$matchContour[a] <- "probPlanktonDeepSet"   }
              if((setone$depth[a] >= setone$maxContour[a]) & !is.na(setone$depth[a]) & !is.na(setone$minContour[a])){
                setone$matchContour[a] <- "diffMatch"   }}}}}

        if(mn == 0){settwo <- setone}
        if(mn > 0){settwo <- rbind(settwo, setone) }
    
          mn <- mn + 500
          mx <- mx + 500
        }
  
        assign(gsub(" ","",paste(namesShallowDeep[i], "_diffmatch")),settwo)  
        rm(x,y,a, setone, setwo)
      }

#These are the keeping objects
namesContoursprovincesShallow <- gsub("shallow", "shallow_diffmatch", namesShallow)
namesContoursprovincesDeep <- gsub("deep", "deep_diffmatch", namesDeep)
namesContoursprovinces <- gsub("worms", "worms_diffmatch", names)
namesContoursprovinces[14] <- "nexpd_mkd_diffmatch"     
namesContoursprovinces

#Merge
rm(i,x,a,b) 
for(i in 1:length(names)){
  a <- get(namesContoursprovincesShallow[i])
  b <- get(namesContoursprovincesDeep[i])
  x <- rbind(a,b) 
  assign(gsub(" ","",paste(names[i], "_diffmatch")),x) 
}

#removing duplicated until this point  
rm(x,i)
for (i in 1:length(namesContoursprovinces)){
  x <- get(namesContoursprovinces[i])
  x2 <- x[!duplicated(x$id),]
  assign(namesContoursprovinces[i],x2)
}

