









#########################################################
#install.packages("raster")
#filter out obvious planktonic to do tiffs!!!!

#Comparing depths through tiffs 
summary(tif)
.rs.unloadPackage("tidyr")

#sf::st_crs("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0")

rm(i,a,y,y0)
for(i in 1:length(namesContoursprovinces)){
  
  y0 <- get(namesContoursprovinces[i]) %>% filter(XCoord !=0 & YCoord !=0 & depth !=0) %>% filter(matchContour == "probPlanktonShallowset")
  #y0 <- get() 
  #y0$XCoord <- y0$decimalLongitude
  #y0$YCoord <- y0$decimalLatitude
  #y0 <- y0 %>% filter(XCoord !=0 & YCoord !=0 & depth !=0)
  #names(y0)[11] <- "id"
  y <- st_as_sf(x = y0,                         
                coords = c("XCoord", "YCoord"),
                crs = "+proj=longlat +datum=WGS84 +ellps=WGS84")
  
  y <- as(y, "Spatial")
  summary(y)
  
  for(a in 1:31){
    data <- data.frame(coordinates(y),
                       y$id, 
                       extract(get(gsub(" ","",paste("tif",a))), y))
    names(data) <- c("x", "y", "id", "value")
    
    if(a == 1){
      rasterfPoints <- data
    }
    
    if(a > 1){
      rasterfPoints <- rbind(rasterfPoints,data)
    }
  }
  
  rasterfPoints <- anti_join(rasterfPoints, (rasterfPoints %>% filter(is.na(value))))
  assign(gsub(" ","",paste(names[i],"_tifRaw")), rasterfPoints)
}

library(tidyr)
library(dplyr) 

#rm(x,i)
#for (i in 1:length(namesContoursprovinces)){
#  x <- get(namesContoursprovinces[i])
#  names(x)[11] <- "id"
#  assign(namesContoursprovinces[i], x)
#}

rm(x,i)  
for (i in 1:length(namesContoursprovinces)){
  x <- left_join((get(namesContoursprovinces[i])), get(gsub(" ","",paste(names[i],"_tifRaw"))), by = "id")
  assign(gsub(" ","",paste(names[i],"_tiffDepths")), x)
}

#These are the keeping objects
namesTiff <- gsub("worms", "worms_tiffDepths", names)
namesTiff[25] <- "emodc_mkd_tiffDepths"
namesTiff[26] <- "nexpd_mkd_tiffDepths"

ls4 <- ls()
ls4 <- ls4[-c(44:50)]

rm(i)
ls4Length <- c()
for (i in 1:length(ls4)){
  ls4Length[i] <- nrow(get(ls4[i]))
}

#vector1 <- c(namesTiff)
#save(list=c("data.1", "data.2"), file = "data.Rdata")
save(list= c(namesTiff, "ls3", "ls3Length", "ls4", "ls4Length"), file = "~/R/1876_2024_tiffs.RData") 
#save.image("~/R/1876-2024_timeSeriesBU.RData")

###End of the script  

#### Analysis 

rm(a,x,i)
for(i in 1:length(namesTiff)){
  
  x <- get(namesTiff[i])
  
  for(a in 1:nrow(x)){
    
    if(!is.na(x$value[a]) & !is.na(x$depthAccuracy[a])){
    
      if (x$value[a] < (x$depth[a] - x$depthAccuracy[a])){
        x$tiffmatch[a] <- "tiffPlankton"
      }
      
      if(x$value[a] > (x$depth[a] + x$depthAccuracy[a])){
        x$tiffmatch[a] <- "tiffBelowdepth"
      }
      
      if(x$value[a] < (x$depth[a] + x$depthAccuracy[a]) & x$value[a] > (x$depth[a] - x$depthAccuracy[a])){
        x$tiffmatch[a] <- "tiffBenthos"
      }
    }
    
    if(!is.na(x$value[a]) & is.na(x$depthAccuracy[a])){
      
      if (x$value[a] < x$depth[a]){
        x$tiffmatch[a] <- "tiffPlankton"
      }
      
      if(x$value[a] > x$depth[a]){
        x$tiffmatch[a] <- "tiffBelowdepth"
      }
      
      if(x$value[a] == x$depth[a]){
        x$tiffmatch[a] <- "tiffBenthos"
      }
    }
    
    if(is.na(x$value[a] & x$matchContour[a] != "probPlanktonShallowset")){
      x$tiffmatch[a] <- "toArcGIS"
    }
    
    if (x$matchContour[a] == "probPlanktonShallowset"){
      x$tiffmatch[a] <- "contourPlankton"
    }
  }
  
  assign(gsub(" ","",paste(names[i],"_allPlanktonBenthos")), x) 
}

save(list= c(namesTiff, "ls3", "ls3Length", "ls4", "ls4Length"), file = "~/R/1876_2024_tiffsB.RData") 

namesPlanktonBenthos <- gsub("_tiffDepths", "_plankBenth", namesTiff)
ls5 <- ls()
ls5 <- ls5[-c(namesTiff)]

rm(i)
ls5Length <- c()
for (i in 1:length(ls5)){
  ls5Length[i] <- nrow(get(ls5[i]))
}

save(list= c(namesTiff, "ls3", "ls3Length", "ls4", "ls4Length", "names", "namesTiff", "ls5", "ls5Length"), file = "~/R/1876_2024_tiffs.RData") 

##End of the script 

########################################################################
#Dups (+FILTER TO EDMONET AND NOREXP AND FORWARD, SEE TEMPO)

#III. Removing duplicates

#Removing duplicates + splitting in latitudes (if the input is a period of the time-series and the output is no-duplicates per latitudinal band for this period)

e <- 1
l <- 0
test <- c()

#splitting by latitudinal bands every degree and filtering out duplicates
rm(i)
for(i in 56:84){
  
  if (i < 61){
    for (j in 1:4) {
      l <- letters[j]
      test[e] <- gsub(" ","", paste("l",i,l))
      e = e +1
    }
  }
  
  else {
    l <- letters[j]
    test[e] <- gsub(" ","", paste("l",i))
    e = e +1
  }
}

rm(b,x)
b <- 1
srichness_ts <- c()
abundances_ts <- c()
occurrences_ts <- c()

for (b in 1:length(namesTiff)){
  f <- 1
  k <- 1
  m <- 1
  p <- 1
  init <- 55.95
  
  i <- 1
  mn <- 0
  mx <- 500
  
  for (i in 1:length(test)){
    
    mn <- 0
    mx <- 500
    
    x <- get(namesTiff[b])
    #splitting in NA and no NA parts to be able to perform the masking
    x_noNA <- x %>% filter(!is.na(x$decimalLongitude) | !is.na(x$decimalLatitude))
    x_NA <- x %>% filter(is.na(x$decimalLongitude) | is.na(x$decimalLatitude))
    
    if (i < 21) {
      x <- x_noNA %>% filter(decimalLatitude>= (init + 0.05) & decimalLatitude< (init + (0.05 + 0.25)))
      assign(test[i], x)
      init <- init + 0.25
    }
    
    if (i > 20 & i < 44) {
      x <- x_noNA %>% filter(decimalLatitude>= (init + 0.05) & decimalLatitude< (init + (0.05 + 1.00)))
      assign(test[i], x)
      init <- init + 1.00
    }  
    
    if (i == 44) {
      x <- x_noNA %>% filter(decimalLatitude>= (init + 0.05) & decimalLatitude<= (init + (0.05 + 1.00)))
      assign(test[i], x)
      init <- init + 1.00
    }
    
    g = x %>% filter(taxonRank == "FORM" | taxonRank == "Species" | taxonRank == "SPECIES" | taxonRank == "SUBSPECIES" | taxonRank == "UNRANKED" | taxonRank == "VARIETY" | is.na(taxonRank))
    assign(gsub(" ","", paste(test[i],"_sp")),g)
    
    df <- g
    df2 <- g
    k <- k + 1
    mylist <- list()
    link <- data.frame()
    
    while(k > 0){
      x <- print(df %>% filter(duplicated(df$decimalLatitude) & duplicated(df$decimalLongitude) & duplicated(df$depth) & duplicated(df$day) & duplicated(df$month) & duplicated(df$year) & duplicated(df$scientificName) & !duplicated (df$database)))
      #df <- anti_join(df, x, by = NULL)
      df = df[!(duplicated(df$decimalLatitude) & duplicated(df$decimalLongitude) & duplicated(df$depth) & duplicated(df$day) & duplicated(df$month) & duplicated(df$year) & duplicated(df$scientificName) & !duplicated (df$database)),]
      k <- nrow(x)
      mylist[[f]] <- x
      link <- do.call("rbind",mylist)
      f <- (nrow(link)) + 100
      assign(gsub(" ","",paste(test[i],"_sp_dups")), link)
    }
    
    if(i == 1){
      spp_level <- nrow(g)
      nodups <- as.data.frame(df)
    }
    
    if(i > 1){
      spp_level <- spp_level + nrow(g)
      nodups <- rbind(nodups,as.data.frame(df))
    }
    
    if(i == 44){
      #Generate the dataset with no duplicates   
      nodups <- rbind(nodups,x_NA)
      assign(gsub(" ","",paste(names[b],"_nodups")), nodups)
      
      sp_list_abundances <- nodups %>% arrange(scientificName) %>% group_by(scientificName, kingdom, class, family) %>% summarise(abundance = sum(individualCount)) %>% filter(grepl("[a-zA-Z]{1,25}\\s{1}[a-z]{2,25}", scientificName))
      sp_list <- sp_list_abundances[c("scientificName","abundance")] %>% arrange(scientificName) %>% group_by(scientificName) %>% summarise(abundance = sum(abundance))
      
      #quantification of species richness
      srichness <- nrow(sp_list)
      
      #quantification of abundances
      abundances <- sum(sp_list$abundance)
      
      #quantification of occurrences
      occurrences <- nrow(nodups)
    }
  }  
  
  #Here the generation for srichness, abundances and occurrences per time slot, per depth   
  
  srichness_ts[b] <- srichness
  abundances_ts[b] <- abundances
  occurrences_ts[b] <- occurrences
}

rm(all)
rm(a,e,f,k,h,l,m,p,z)
rm(i,b)

#These are the keeping objects
namesNodups <- gsub("worms", "worms_nodups", names)
namesNodups[25] <- "emodc_mkd_nodups"
namesNodups[26] <- "nexpd_mkd_nodups"

#leave only last objects before saving!
save.image("//home.ansatt.ntnu.no/lcgarcia/Documents/R/1876-2024_timeSeriesB.RData")

###End of the script


#Join
# Split Every 10yrs


#General stats

#Export shapes

#Import datatables

#Plot logaritmic curves        






#II. Getting the two depth intervals (0-500m and 500 and below)

namesShallow <- c()
namesDeep <- c()

rm(i, x, df)
for (i in 1:length(names)){
  
  df <- get(gsub(" ","",paste(names[i],"_extDepths")))
  namesShallow[i] <- gsub(" ","",paste(names[i],"_shallow"))
  namesDeep[i] <- gsub(" ","",paste(names[i],"_deep"))
  shallow <- df %>% filter(depth<500)
  assign(gsub(" ","",paste(names[i],"_shallow")),shallow)
  deep <- df %>% filter(depth>=500)
  assign(gsub(" ","",paste(names[i],"_deep")),deep)
  namesShallowDeep <- c(namesShallow, namesDeep)
} 
rm(i,shallow,deep)




