#Emodnet script 

###########################


##Request from EMODnet

# load dependencies
## geospatial data handling
library(rgdal)
library(raster)
library(sp)
library(mapdata)
library(ncdf4)
library(XML)
library(dplyr)
library(tidyr)
library(reshape2)
library(downloader)
library(directlabels)
library(rasterVis)
library(ggplot2)
library(knitr)
library(IRdisplay)
library(repr)
library(sf)

#remotes::install_github("EMODnet/EMODnetWFS")
library("EMODnetWFS")
#View(emodnet_wfs())
wfs_bathy <- emodnet_init_wfs_client(service = "bathymetry")
info <- emodnet_get_wfs_info(wfs_bathy)
wfs_bio <- emodnet_init_wfs_client(service = "biology_occurrence_data")
info <- emodnet_get_wfs_info(wfs_bio)

bathy <- emodnet_get_layers(
  service = "bathymetry",
  layers = c("download_tiles"), 
  #BBOX = paste(xmin,ymin,xmax,ymax,sep=",")
)

bathy <- bathy[["download_tiles"]]
View(bathy)
#tif: 2:32
#xyz: 504:474
#2:32
#rm(i)
#i <- 1
urls <- bathy$download_url[2:32] #Goes to D rows
for(i in 1:length(urls)){
  
  download.file(url=urls[i],
                destfile=gsub(" ","",paste("tile_",i,"2022.tif.zip")))
  #unzip(zipfile = gsub(" ","",paste("tile_",i,"2022.tif.zip")), exdir = "\\\\home.ansatt.ntnu.no/lcgarcia/Documents/R")
  route <- unzip(zipfile = gsub(" ","",paste("tile_",i,"2022.tif.zip")), exdir = "\\\\home.ansatt.ntnu.no/lcgarcia/Documents/R")
  tif <- raster(route)
  #xyz = rasterToPoints(tif, spatial = TRUE)
  assign(gsub(" ","",paste("tif",i)), tif)
  #writeOGR(xyz,"\\\\home.ansatt.ntnu.no/lcgarcia/Documents/R",gsub(" ","",paste("output_name.shp",i)), driver="ESRI Shapefile")
}

save.image("//home.ansatt.ntnu.no/lcgarcia/Documents/R/1900_23_tiffs.RData")
summary(tif)

#sf::st_crs("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0")

rm(i,a,y)
for(i in 1:length(namesShallowDeepPlot)){
  
  dbs_mkd_taxa_new <- get(namesShallowDeepPlot[i]) %>% filter(XCoord !=0 & YCoord !=0 & depth !=0)
  y <- st_as_sf(x = dbs_mkd_taxa_new,                         
                coords = c("XCoord", "YCoord"),
                crs = "+proj=longlat +datum=WGS84 +ellps=WGS84")
  
  y <- as(y, "Spatial")
  summary(y)
  
  #.rs.unloadPackage("tidyr")
  
  for(a in 1:31){
    data <- data.frame(coordinates(y),
                       y$id, 
                       extract(get(gsub(" ","",paste("tif",a))), y))
    names(data) <- c("x", "y", "id", "value")
    
    if(a == 1){
      rasterfPoints <- data
    }
    
    if(a > 1){
      rasterfPoints <- rbind(rasterfPoints,data)
    }
  }
  
  rasterfPoints <- anti_join(rasterfPoints, (rasterfPoints %>% filter(is.na(value))))
  assign(gsub(" ","",paste(namesShallowDeepPlot[i],"_tif")), rasterfPoints)
}

#compare numbers after charging obis
#Then join to each by id and with the +- range of depthAccuracy (this in the discussion). Mean depth accuracy for the other records???... And report new column! Planktic benthic. &Final plots!!!!
#Only in case of: sf::st_crs("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0")
#Convert the DEM elevation Data to Point using Raster to Point
#Use the tool Near if you have an advanced license.
#Use a Spatial Join if you do not have an advanced license.
#If your input is a line then use points along line before step 2.

#The GME plug-in will do this in ArcGIS Desktop as well.

#https://gis.stackexchange.com/questions/397696/alternatives-to-add-surface-information-and-extract-values-from-points

xmin= -27
ymin= 56
xmax= 38
ymax= 85

layer <- emodnet_get_layers(
  service = "biology_occurrence_data",
  layers = c("eurobis-obisenv"), 
  BBOX = paste(xmin,ymin,xmax,ymax,sep=",")
)

layer <- layer[["eurobis-obisenv"]]

#Formatting EMODnet accordingly to GBIF+OBIS fields

#names(dbs_mkd_taxa_new1900_49_deep_diffmatch_nodups)
names(layer)

### Apply the filters

#layerbu <- layer
#layer <- layerbu
layer <- layer[,c(35,50,4,66,16,37,38,79,52,2,68,57,48,13,40,43,10,123,29,32)]
names(layer)

layer <- as.data.frame(layer)

#This is an example with an object to select the names from
names(layer)[1] <- "coordinateUncertaintyInMeters" #"coordinateuncertaintyinmeters" to "coordinateUncertaintyInMeters"
names(layer)[3] <- "dataset" #"datasetid" to "dataset" 
names(layer)[4] <- "dateIdentified" #"dayidentified" to "dateIdentified"
names(layer)[5] <- "day" #"daycollected" to "day"
#to calculate a (mean) value for the depth
layer$depth <- (layer$minimumdepthinmeters + layer$maximumdepthinmeters)/2
#remove one of the columns for depth
layer <- layer[-7]
layer[6] <- layer[20]
layer <- layer[-20]
names(layer)
names(layer)[6] <- "depth" #"minimumdepthinmeters"and "maximumdepthinmeters" to "depth" (mean)
names(layer)[7] <- "depthAccuracy" #"depthrange" to "depthAccuracy"
names(layer)[10] <- "individualCount" #"samplingeffort" to "individualCount"
names(layer)[11] <- "flags" #"occurrenceremarks" to "flags"
names(layer)[13] <- "month" #"monthcollected" to "month"
names(layer)[14] <- "scientificName" #"scientificname" to "scientificName"
names(layer)[15] <- "taxonRank" #"taxonrank" to "taxonRank"
names(layer)[16] <- "year" #"yearcollected" to "year"
names(layer)
#names(dbs_mkd_taxa_new1900_49_deep_diffmatch_nodups)
layer$database <- "emodnet"
layer <- layer[-17]
names(layer)
layer$XCoord <- layer$decimallatitude
layer$YCoord <- layer$decimallongitude
layer$decimalLatitude <- layer$YCoord
layer$decimalLongitude <- layer$XCoord
layer <- layer[-17]
layer <- layer[-17]
names(layer)

alledmo24 <- layer
View(alledmo24)
#Pass all the algorithm for EMODnet


#From script 2a (modified)
#II. Masking the landshape out of databases

library("ggplot2")
#theme_set(theme_bw())
library("sf")

#install.packages("rnaturalearth")
library("rnaturalearth")
#install.packages("rnaturalearthdata")
library("rnaturalearthdata")

world <- ne_countries(scale = "medium", returnclass = "sf")
world2 <- st_crop(world, xmin = -27, ymin = 50, xmax = 38, ymax = 85)

#install.packages("ggspatial")
library("ggspatial")

x <- world2

y0 <- alledmo24
y0$XCoord <- y0$decimalLongitude
y0$YCoord <- y0$decimalLatitude
alledmo24 <- y0

y <- st_as_sf(x = alledmo24,                         
              coords = c("XCoord", "YCoord"),
              crs = 4326)

y_int <- st_intersects(y,x)
y_log <- lengths(y_int) == 0 
databases_mkd <- y[y_log, ]

databases_mkd <- as.data.frame(databases_mkd)

assign(gsub(" ","",paste("alledmo24", "_mkd")),databases_mkd)


#3. Save allgbifs masked (take picture to the complete dataset values before)
#save.image("~/R/allgbif24_mkd.RData")
rm(y,y_int,y_log,y0)

#4. Run worms filter

library(janitor)
library(tibble)
library(stringr)
library(dplyr)
library(data.table)
library(sf)
library(s2)
library(stars)
library(ggplot2)
library(wdpar)
library(readxl)

#2b. Taxon filtering with WoRMS database
rm(b)
length(alledmo24_mkd)
#1:5
#b <- 4
#I. Masking the groups that would not correspond to the marine environment (depending on the scope of the study)

#Filter to the species level (forGBIF)
dbs_mkd_taxa = alledmo24_mkd # %>% filter(taxonRank == "FORM" | taxonRank == "Species" | taxonRank == "SPECIES" | taxonRank == "SUBSPECIES" | taxonRank == "UNRANKED" | taxonRank == "VARIETY" | is.na(taxonRank))
dbs_mkd_taxa$scientificName = str_extract(string = dbs_mkd_taxa$scientificName, pattern = "[a-zA-Z]{1,25}\\s{1}[a-z]{2,25}")

#Then excluding some taxa
#unique(databases_mkd$kingdom)
#unique(databases_mkd$class)                         
#unique(databases_mkd$family)
dbs_mkd_taxa <- dbs_mkd_taxa %>% filter(kingdom != "Plantae")
exc_class = c("Tricholomataceae", "Fringillidae", "Insecta", "Arachnida", "Hexapoda", "Diplopoda", "Pauropoda", "Chilopoda", "Symphyla", "Diplura", "Protura", "Collembola")

rm(i)

for (i in exc_class){
  
  dbs_mkd_taxa <- dbs_mkd_taxa %>% filter(class != i)
}

#II. Reading information from WoRMS in order to determine which families are non-marine

taxon <- read.delim("~/R/taxon.txt") %>% filter(acceptedNameUsage != "") # to get the accepted names and the names where they come from (i.e Lophelia) # filter(taxonomicStatus == "accepted") only has accepted names, but not the species that has been re-assigned after theri original designation
speciesprofile <- read.delim("~/R/speciesprofile.txt")
unique(taxon$taxonRank) #verify that the taxonomic level corresponds to species.
worms <- right_join(taxon[,c(1,6:8,11:20,30)], speciesprofile %>% filter(isMarine == 1), by = "taxonID")
unique(dbs_mkd_taxa$kingdom)
unique(dbs_mkd_taxa$class)
families_db <- unique(dbs_mkd_taxa$family)
families_worms <- unique(worms$family)

n <- 1
rm(i)
max_log <- c()

# To see TRUE matches, we choose the maximum logical output, as this contains TRUE results.

for(i in families_db){
  max_log[i] <- length(unique(families_worms == i))
}
max(max_log)

#Removing NAs

unique(max_log)
length(families_db)

if(length(which(max_log == 1))>0) {
  families_db <- families_db[-(which(max_log == 1))]
}
length(families_db)

#Repeat the previous operation after removing NA records (there was not a match with records that can be contrasted with the information in WoRMS)

n <- 1
rm(i)
max_log <- c()

for(i in families_db){
  max_log[i] <- length(unique(families_worms == i))
}

unique(max_log)
vector2false <- which(max_log == 2) #non-marine
vector3true <- which(max_log == 3) #marine

log_fam <- c()
n <- 1
rm(i)

for(i in families_db){
  
  if (length(unique(families_worms == i)) == max(max_log)){
    log_fam[n] <- TRUE 
    n <- n+1
  }
  
  else {
    log_fam[n] <- FALSE 
    n <- n+1
  }
}

length(log_fam[log_fam == TRUE]) # Number of marine
length(log_fam[log_fam == FALSE]) # Number of non-marine

log_fam_nomar <- log_fam == FALSE
mar_fam <- families_db[log_fam] #subsample the marine families
nomar_fam <- families_db[log_fam_nomar] #subsample the non-marine families

#To check if NAs are removed
nomar_fam <- nomar_fam[-(which(is.na(nomar_fam)))]

#III. Run this part and add from new lists as it is time-convenient. These one-two lists are assessed with taxa from 1970to79

#Adding and removing families that are marine and present in non-marine list and
#families that are non-marine and are present in marine list

#Confirmed marine in worms
one <- read_excel("~/R/one.xlsx", col_names = FALSE)
colnames(one) <- c("species")
one <- one$species
#Question marks, confirmed in artsdatabanken
two <- c("Sistotremataceae", "Naetrocymbaceae", "Mycocaliciaceae", "Dacampiaceae", "Lirellidae")
#Marine that turned out to be no marine after confirmation (or non-valid taxa). It could have further revision.
plus_nomarine <- c("Esocidae", "Clausiliidae", "Physetocarididae")

#merging the new marine and removing from the nomarine list
plus_marine <- append(one,two)
nomar_fam <- nomar_fam[!nomar_fam %in% plus_marine]

#adding the new non-marine
nomar_fam <- append(nomar_fam,plus_nomarine)

###########
#Run comparing to the current database

rm(i)

for (i in nomar_fam){
  dbs_mkd_taxa <- dbs_mkd_taxa %>% filter(family != i)
}

#IV. Removing the species within the families that are non-marine
species_db <- unique(dbs_mkd_taxa$scientificName)
species_worms <- c(worms$scientificName, worms$acceptedNameUsage) #no need of unique(worms$parentNameUsage), as this is a level above species and the species are the ones considered for this work.

n <- 1
rm(i)
max_log <- c()

# To see the match that was true (FALSE,NA,TRUE), we choose the maximum logical output
for(i in species_db){
  max_log[i] <- length(unique(species_worms == i))
}
max(max_log)

#Remove NAs

unique(max_log)
length(species_db)

if(length(which(max_log == 1))>0) {
  species_db <- species_db[-(which(max_log == 1))]
}
length(species_db)

#Repeat without NAs present 

rm(i)
max_log <- c()

for(i in species_db){
  max_log[i] <- length(unique(species_worms == i))
}

unique(max_log)

vector2false <- which(max_log == 2) #non-marine
vector3true <- which(max_log == 3) #marine

log_spp <- c()
n <- 1
rm(i)

for(i in species_db){
  
  if (length(unique(species_worms == i)) == max(max_log)){
    log_spp[n] <- TRUE 
    n <- n+1
  }
  
  else {
    log_spp[n] <- FALSE 
    n <- n+1
  }
}

length(log_spp[log_spp == TRUE]) # Number of marine
length(log_spp[log_spp == FALSE]) # Number of non-marine


log_spp_nomar <- log_spp == FALSE
mar_spp <- species_db[log_spp] #subsample the marine species
nomar_spp <- species_db[log_spp_nomar] #subsample the non-marine species

#V. Run comparing to the current database

rm(i)

for (i in nomar_spp){
  dbs_mkd_taxa <- dbs_mkd_taxa %>% filter(scientificName != i)
}

length(unique(dbs_mkd_taxa$class))
rm(i,n)

################# 

#This part is getting the dataset ready to obtain the species abundance later, the species count that is NA is taken as 1 (one record) and added together afterwards within the same species.
#####PENDING!!!!!!!!!!!!!! FOR THE OTHER DATASETS. This for gbif 

dbs_mkd_taxa$individualCount[is.na(dbs_mkd_taxa$individualCount)] <- 1
#dbs_mkd_taxa$individualCount[dbs_mkd_taxa$individualCount < 0] <- (dbs_mkd_taxa$individualCount[dbs_mkd_taxa$individualCount < 0])*-1 
dbs_mkd_taxa$individualCount[dbs_mkd_taxa$individualCount == 0] <- 1

assign(gsub(" ","",paste("alledmo24", "_mkd_worms")),dbs_mkd_taxa)    

###End of the script

rm(i,n,b)
#save(list= c("alledmo24", "alledmo24_mkd", "alledmo24_mkd_worms"), file = "~/R/alledmo24_new.RData")
#save(list= c("alledmo24", "alledmo24_mkd", "alledmo24_mkd_worms", "emodc_mkd_worms_diffmatch"), file = "~/R/alledmo24_new.RData")

emodc_mkd_worms <- alledmo24_mkd_worms
