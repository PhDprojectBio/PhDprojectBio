vector1 <- c(namesContours, namesContoursprovincesShallow, namesContoursprovincesDeep, namesContoursprovinces)

save(list= namesTiff, file = "~/R/1876-2024_timeSeries2.RData") 


ls3 <- ls()

rm(i)
ls3Length <- c()
for (i in 1:length(ls3)){
  ls3Length[i] <- nrow(get(ls3[i]))
}


tempo <- ls()
namesContoursprovinces <- tempo[c(3:14,19:30,2,18)]


###############

## geospatial data handling
library(rgdal)
library(raster)
library(sp)
library(mapdata)
library(ncdf4)
library(XML)
library(dplyr)
library(tidyr)
library(reshape2)
library(downloader)
library(directlabels)
library(rasterVis)
library(ggplot2)
library(knitr)
library(IRdisplay)
library(repr)
library(sf)

#install.packages("remotes")
#remotes::install_github("EMODnet/EMODnetWFS")
library("EMODnetWFS")
#View(emodnet_wfs())
wfs_bathy <- emodnet_init_wfs_client(service = "bathymetry")
info <- emodnet_get_wfs_info(wfs_bathy)
wfs_bio <- emodnet_init_wfs_client(service = "biology_occurrence_data")
info <- emodnet_get_wfs_info(wfs_bio)

bathy <- emodnet_get_layers(
  service = "bathymetry",
  layers = c("download_tiles"), 
  #BBOX = paste(xmin,ymin,xmax,ymax,sep=",")
)

bathy <- bathy[["download_tiles"]]
View(bathy)
#tif: 2:32
#xyz: 504:474
#2:32
#rm(i)
#i <- 1
urls <- bathy$download_url[2:32] #Goes to D rows
for(i in 1:length(urls)){
  
  download.file(url=urls[i],
                destfile=gsub(" ","",paste("tile_",i,"2022.tif.zip")))
  #unzip(zipfile = gsub(" ","",paste("tile_",i,"2022.tif.zip")), exdir = "\\\\home.ansatt.ntnu.no/lcgarcia/Documents/R")
  route <- unzip(zipfile = gsub(" ","",paste("tile_",i,"2022.tif.zip")), exdir = "\\\\home.ansatt.ntnu.no/lcgarcia/Documents/R")
  tif <- raster(route)
  #xyz = rasterToPoints(tif, spatial = TRUE)
  assign(gsub(" ","",paste("tif",i)), tif)
  #writeOGR(xyz,"\\\\home.ansatt.ntnu.no/lcgarcia/Documents/R",gsub(" ","",paste("output_name.shp",i)), driver="ESRI Shapefile")
}

save.image("~/R/1900_23_tiffs.RData")
summary(tif)

#sf::st_crs("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0")

rm(i,a,y)
for(i in 1:length(namesShallowDeepPlot)){
  
  dbs_mkd_taxa_new <- get(namesShallowDeepPlot[i]) %>% filter(XCoord !=0 & YCoord !=0 & depth !=0)
  y <- st_as_sf(x = dbs_mkd_taxa_new,                         
                coords = c("XCoord", "YCoord"),
                crs = "+proj=longlat +datum=WGS84 +ellps=WGS84")
  
  y <- as(y, "Spatial")
  summary(y)
  
  #.rs.unloadPackage("tidyr")
  
  for(a in 1:31){
    data <- data.frame(coordinates(y),
                       y$id, 
                       extract(get(gsub(" ","",paste("tif",a))), y))
    names(data) <- c("x", "y", "id", "value")
    
    if(a == 1){
      rasterfPoints <- data
    }
    
    if(a > 1){
      rasterfPoints <- rbind(rasterfPoints,data)
    }
  }
  
  rasterfPoints <- anti_join(rasterfPoints, (rasterfPoints %>% filter(is.na(value))))
  assign(gsub(" ","",paste(namesShallowDeepPlot[i],"_tif")), rasterfPoints)
}

#compare numbers af



#These are the keeping objects
names <- gsub("_diffmatch", "", namesContoursprovinces)









##### Dividing the contoured depths in shallow and deep
rm(x,y,i)

for(i in 1:length(names)){
  mn <- 0
  mx <- 500
  
  while (mn < 6000){
    
    x <- get(gsub(" ","",paste(names[i],"_mkd_",mn,"_",mx,"_adddepth")))
    
    if (nrow(x) > 0){
      
      shallow <- x %>% filter(depth<500)
      assign(gsub(" ","",paste(names[i],"_shallow","_mkd_",mn,"_",mx)),shallow)
      deep <- x %>% filter(depth>=500)
      assign(gsub(" ","",paste(names[i],"_deep","_mkd_",mn,"_",mx)),deep)
    }
    
    if (nrow(x) == 0){
      
      assign(gsub(" ","",paste(names[i],"_shallow","_mkd_",mn,"_",mx)),x)
      assign(gsub(" ","",paste(names[i],"_deep","_mkd_",mn,"_",mx)),x)
    }  
    
    mn <- mn + 500
    mx <- mx + 500
  }
}

#These are the keeping objects and the labels for the years
namesContours <- gsub("worms", "worms_extDepthsbind", names)
namesContours[25] <- "emodc_mkd_extDepthsbind"
namesContours[26] <- "nexpd_mkd_extDepthsbind"
yearsLabels <- c("1876-1899", "1900-1949", "1950-1959", "1960-1969", "1970-1979", "1980-1989", "1990-1999", "2000-2004", "2005-2009", "2010-2014", "2015-2019", "2020-2023")

#II. Getting the two depth intervals (0-500m and 500 and below)
namesShallow <- c()
namesDeep <- c()

rm(i, x, df)
for (i in 1:length(names)){
  
  df <- get(namesContours[i])
  namesShallow[i] <- gsub(" ","",paste(names[i],"_shallow"))
  namesDeep[i] <- gsub(" ","",paste(names[i],"_deep"))
  shallow <- df %>% filter(depth<500)
  assign(gsub(" ","",paste(names[i],"_shallow")),shallow)
  deep <- df %>% filter(depth>=500)
  assign(gsub(" ","",paste(names[i],"_deep")),deep)
  namesShallowDeep <- c(namesShallow, namesDeep)
} 
rm(i,shallow,deep)

########## REFORMULATE HERE ####

#Ocean provinces are assigned and correspondence with contours is writen in the field matchContours.

rm(i,x,a, mn, mx,setone,settwo,y)
for (i in 1:length(namesShallowDeep)){
  
  mn <- 0
  mx <- 500
  
  while (mn < 6000){
    
    setone <- get(gsub(" ","",paste(namesShallowDeep[i],"_mkd_",mn,"_",mx)))
    
    #Assigning new fields
    
    if(nrow(setone) > 0){
      setone$matchContour <- "pendmatch" #to see if there is any without classification afterwards
      
      if (i <= 26){
        
        #setting the oceanic province
        setone$oProvince <- "epipelagic and mesopelagic"
        
        if (mn == 0){
          setone$matchContour <- "match"
          
          for(a in 1:nrow(setone)){
            if(setone$depth[a] >= 500){
              setone$matchContour[a] <- "diffmatch"
            }
          }
        }
        
        #merging into one datatable with the new field contours
        
        if (mn > 0){
          setone$matchContour <- "probPlanktonShallowset"
        }
      }
      
      if(i > 26){
        
        #setting the oceanic province
        if(mn == 0){setone$oProvince <- "epipelagic and mesopelagic"}
        if(mn == 500){setone$oProvince <- "mesopelagic"}
        if(mn >= 1000 & mn < 4000){setone$oProvince <- "bathypelagic"}
        if(mn >= 4000){setone$oProvince <- "abyssopelagic"}
        
        if (mn == 0){
          setone$matchContour <- "shallowfromDeepset"
        }
        
        #merging into one datatable with the new field contours
        
        if (mn > 0){
          setone$matchContour <- "match"
          
          for(a in 1:nrow(setone)){
            if(setone$depth[a] >= 0 & setone$depth[a] < setone$minContour[a]){
              setone$matchContour[a] <- "probPlanktonDeepset"
            }
            if(setone$depth[a] >= setone$maxContour[a]){
              setone$matchContour[a] <- "diffmatch"
            }
          }
        }
      } 
      #rm(a)
    }
    
    if(mn == 0){
      settwo <- setone
    }
    
    if(mn > 0){
      settwo <- rbind(settwo, setone)
    }
    
    mn <- mn + 500
    mx <- mx + 500
    
  }
  
  assign(gsub(" ","",paste(namesShallowDeep[i], "_diffmatch")),settwo)  
  rm(x,y,a, setone, setwo)
  #rm(z)
}
























##################################
rm(i,x,a, mn, mx,setone,settwo,y)    
for (i in 1:length(names)){
  
  mn <- 0
  mx <- 500
  
  while (mn < 6000){
    
    setone <- get(gsub(" ","",paste(names[i],"_mkd_",mn,"_",mx,"_adddepth")))
    
    #Assigning new fields
    
    if(nrow(setone) > 0){
      setone$matchContour <- "pendmatch" #to see if there is any without classification afterwards
      
      if (i < 13){
        
        #setting the oceanic province
        setone$oProvince <- "epipelagic and mesopelagic"
        
        if (mn == 0){
          setone$matchContour <- "match"
          
          #  for(a in 1:nrow(setone)){
          #   if(setone$depth[a] >= 500){
          #    setone$matchContour[a] <- "diffmatch"
          #  }
          #  }
        }
        
        #merging into one datatable with the new field contours
        
        if (mn > 0){
          setone$matchContour <- "probPlanktonShallowset"
        }
      }
      
      if(i > 12){
        
        #setting the oceanic province
        if(mn == 0){setone$oProvince <- "epipelagic and mesopelagic"}
        if(mn == 500){setone$oProvince <- "mesopelagic"}
        if(mn >= 1000 & mn < 4000){setone$oProvince <- "bathypelagic"}
        if(mn >= 4000){setone$oProvince <- "abyssopelagic"}
        
        if (mn == 0){
          setone$matchContour <- "shallowfromDeepset"
        }
        
        #merging into one datatable with the new field contours
        
        if (mn > 0){
          setone$matchContour <- "match"
          
          #   for(a in 1:nrow(setone)){
          #    if(setone$depth[a] >= 0 & setone$depth[a] < setone$minContour[a]){
          #     setone$matchContour[a] <- "probPlanktonDeepset"
          #    }
          #    if(setone$depth[a] >= setone$maxContour[a]){
          #     setone$matchContour[a] <- "diffmatch"
          #    }
          #  }
        }
      } 
      #rm(a)
    }
    
    if(mn == 0){
      settwo <- setone
    }
    
    if(mn > 0){
      settwo <- rbind(settwo, setone)
    }
    
    mn <- mn + 500
    mx <- mx + 500
    
  }
  
  assign(gsub(" ","",paste(names[i], "_diffmatch")),settwo)  
  rm(x,y,a, setone, setwo)
  #rm(z)
}




















#########################


rm(x,y,i)

for(i in 1:length(names)){
  mn <- 0
  mx <- 500
  
  while (mn < 6000){
    
    x <- get(gsub(" ","",paste(names[i],"_mkd_",mn,"_",mx,"_adddepth")))
    
    if(nrow(x) > 0){
      
      if (mn == 0){
        x$oProvince <- "epipelagic and mesopelagic"
      }
      
      if (mn == 500){
        x$oProvince <- "mesopelagic"
      }
      
      if (mn > 500 & mn < 4000){
        x$oProvince <- "bathypelagic"
      }
      
      if (mn >= 4000){
        x$oProvince <- "abyssopelagic"
      }
      
      if(mn == 0){
        settwo <- x
      }
      
      if(mn > 0){
        settwo <- rbind(settwo, x)
      }  
      
      #assign(gsub(" ","",paste(names[i],"_mkd_",mn,"_",mx,"_adddepth")),x)
      
    }
    
    mn <- mn + 500
    mx <- mx + 500
  }
  
  assign(gsub(" ","",paste(names[i], "_diffmatch")),settwo)  
  rm(x,y,a, setone, setwo)
}

rm(x,y,i)
