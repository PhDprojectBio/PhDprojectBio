#loading libraries and directory
setwd("//myDirectory/myFolder/myDocuments/R")

library(janitor)
library(tibble)
library(stringr)
library(dplyr)
library(data.table)
library(sf)
library(s2)
library(stars)
library(ggplot2)
library(wdpar)
library(vegan)


#####Do all downloads and loads :) !!!
### Landshape and worms filtering, except in EMODnet y NAexp the last one.
#See 10c. From WalR Emodnet.
#See steps script.
#See 2a. Building up - general database and missing depths.
#Import to the environment.


#Adjustment, check backwards
emodc_mkd <- alledmo24_mkd
emodc_mkd <- emodc_mkd[, !(colnames(emodc_mkd) %in% c("XCoord","YCoord"))]

#######

names <- ls()
names <- names[c(28:39,55:66,11,48)]  #adjust accordingly to your environment. It must contain all masked downloads.
names

#############!Normalize names
sort(names(gbifa_1876to99_mkd_worms))
sort(names(obisb_1876to99_mkd_worms))
sort(names(emodc_mkd))
sort(names(nexpd_mkd))


#Assigning "database" fields

rm(i,x)
for(i in 1:length(names)){
  x <- get(names[i])
  
  if (i >= 1 & i <=12){
    setnames(x, "datasetKey", "dataset")
    setnames(x, "gbifID", "id")
    setnames(x, "issue", "flags")
    x$database <- "gbif"
    x$id = as.character(x$id)
    x$dateIdentified = as.character(x$dateIdentified)
  }
  
  if (i >= 13 & i <=24){
    setnames(x, "datasetName", "dataset")
    setnames(x, "eventID", "depthAccuracy")
    x$depthAccuracy <- 0.999999
    x$database <- "obis"
  }
  
  if (i == 25){
    x$database <- "emodnet"
  }
  
  if (i == 26){
    x$database <- "NNAexp86-88"
  }
  
  x$year = as.numeric(x$year)
  x$month = as.numeric(x$month)
  x$day = as.numeric(x$day)
  x$coordinateUncertaintyInMeters = as.numeric(x$coordinateUncertaintyInMeters)
  x$individualCount = as.numeric(x$individualCount)
  
  x$scientificName = str_extract(string = x$scientificName, pattern = "[a-zA-Z]{1,25}\\s{1}[a-z]{2,25}")
  
  assign(names[i], x)
} 


#III. Assigning new fields

library("ggplot2")
library("sf")
library("rnaturalearth")
library("rnaturalearthdata")
library("ggspatial")


#Interpolating contours "_extDepths"
#And #############
#Splitting in 500m depth intervals

rm(i,x,a,y0,mn,mx,y)
for (i in 1:length(names)){
  
  #I. Split records that do not have recorded depth from those that have recorded depth 
  
  y0 <- get(names[i])
  
  nodepth_mkd <- y0 %>% filter(is.na(depth))
  
  nodepth_mkd$XCoord <- nodepth_mkd$decimalLongitude
  nodepth_mkd$YCoord <- nodepth_mkd$decimalLatitude
  depth_mkd <- y0 %>% filter(!is.na(depth)) #anti_join(dbs_mkd_taxa, nodepth_mkd) #records with depth (excluding the ones with no depth)
  depth_mkd$XCoord <- depth_mkd$decimalLongitude
  depth_mkd$YCoord <- depth_mkd$decimalLatitude
  
  if(nrow(nodepth_mkd) > 0){
  
  #II. Retrieving depths for records that do not have depth 
  
  mn <- 0
  mx <- 500
  
  while (mn < 6000){
    
    x <- st_read(as.character(gsub(" ","",paste("contour",mn,"_",mx,".shp"))))
    
    if(i == 26){ #For 1876_99 only. Records with no recorded coordinates need to be excluded in this step.
      nodepth_mkd_noNA <- nodepth_mkd %>% filter(!is.na(nodepth_mkd$XCoord) | !is.na(nodepth_mkd$YCoord))
      nodepth_mkd_NA <- nodepth_mkd %>% filter(is.na(nodepth_mkd$XCoord) | is.na(nodepth_mkd$YCoord))
      #nodepth_mkd_NA$geometry <- NA 
      y <- st_as_sf(x = nodepth_mkd_noNA,      #For all except 1876_99: nodepth_mkd                   
                    coords = c("XCoord", "YCoord"),
                    crs = 4326)
    }
    
    if(i != 26){
      y <- st_as_sf(x = nodepth_mkd,      #For all except 1876_99: nodepth_mkd                   
                    coords = c("XCoord", "YCoord"),
                    crs = 4326)
    }
    
    y_int <- st_intersects(y,x)
    y_log <- lengths(y_int) > 0 
    mkd <- y[y_log, ]
    
    mkd$XCoord <- st_coordinates(mkd$geometry)[,1]
    mkd$YCoord <- st_coordinates(mkd$geometry)[,2]
    
    mkd <- as.data.frame(mkd)
    
    if(i == 26){
      mkd <- rbind(mkd, nodepth_mkd_NA)
      names_nodepth_mkd_NA <- names(nodepth_mkd_NA)
      mkd <- mkd[, names_nodepth_mkd_NA]
    }
    
    assign(gsub(" ","",paste(names[i],"_mkd_",mn,"_",mx)), mkd)
    assign(gsub(" ","",paste(names[i],"_mkd_",mn,"_",mx,"_compare")), mkd)
    
    if (mn == 0){
      mkd_allcont <- mkd
    }
    
    if (mn > 0){
      mkd_allcont <- rbind(mkd_allcont,mkd)
    }
    
    mn <- mn + 500
    mx <- mx + 500
  }
  
  #get the set that probably correspond to the polygon and graphically represent the result to confirm it and join to the corresponding depth (0to500)
  if(i != 26){
    polygon <- anti_join(nodepth_mkd,mkd_allcont)
  }
  
  #For 1876_99 only
  if(i == 26){
    polygon <- anti_join(nodepth_mkd_noNA,mkd_allcont)
  }
  
  mkd_0_500 <- rbind(get(gsub(" ","",paste(names[i],"_mkd_0_500"))), polygon)
  assign(gsub(" ","",paste(names[i],"_mkd_0_500")), mkd_0_500)
  
  #Assigning depths accordingly to the contours
  
  rm(x,y)
  
  mn <- 0
  mx <- 500
  
  while (mn < 6000){
    
    adddepth <- get(gsub(" ","",paste(names[i],"_mkd_",mn,"_",mx)))
    
    if (nrow(adddepth) > 0){
      adddepth$depth <- mn+1
      adddepth$depthAccuracy <- 0.999999   #To identify records with missing depthAccuracy
      assign(gsub(" ","",paste(names[i],"_mkd_",mn,"_",mx,"_adddepth")),adddepth)
    }
    
    #Creating a new nodepth records with new established depths
    
    if (mn == 0){
      nodepth_mkd_new <- adddepth
    }
    
    if (mn > 0){
      nodepth_mkd_new <- rbind(nodepth_mkd_new,adddepth)
    }
    
    mn <- mn + 500
    mx <- mx + 500
  }
  
  #III. Joining record with retrieved depths with those that had depths recorded already.
  
  dbs_mkd_taxa_new <- rbind(depth_mkd,nodepth_mkd_new)
  assign(gsub(" ","",paste(names[i],"_extDepths")),nodepth_mkd_new)
  assign(gsub(" ","",paste(names[i],"_extDepthsbind")),dbs_mkd_taxa_new)
  
  ###End of the script
  
  }
}

save.image("//home.ansatt.ntnu.no/lcgarcia/Documents/R/1876-2024_timeSeries.RData")

#III.

#These are the keeping objects and the labels for the years
namesContours <- gsub("worms", "worms_extDepthsbind", names)
namesContours[25] <- "emodc_mkd_extDepthsbind"
namesContours[26] <- "nexpd_mkd_extDepthsbind"
yearsLabels <- c("1876-1899", "1900-1949", "1950-1959", "1960-1969", "1970-1979", "1980-1989", "1990-1999", "2000-2004", "2005-2009", "2010-2014", "2015-2019", "2020-2023")

#Ocean provinces are assigned and correspondence with contours is writen in the field matchContours.

rm(i,x,a, mn, mx,setone,settwo,y)
for (i in 1:length(names)){
  
  mn <- 0
  mx <- 500
  
  while (mn < 6000){
    
    if (nrow(get(gsub(" ","",paste(names[i],"_mkd_",mn,"_",mx)))) > 0){ 
    
      setone <- get(gsub(" ","",paste(names[i],"_mkd_",mn,"_",mx,"_adddepth")))
    
    #Assigning new fields
    
    if(nrow(setone) > 0){
      setone$matchContour <- "pendmatch" #to see if there is any without classification afterwards
      
      if (i < 13){
        
        #setting the oceanic province
        setone$oProvince <- "epipelagic and mesopelagic"
        
        if (mn == 0){
          setone$matchContour <- "match"
          
          for(a in 1:nrow(setone)){
            if(setone$depth[a] >= 500){
              setone$matchContour[a] <- "diffmatch"
            }
          }
        }
        
        #merging into one datatable with the new field contours
        
        if (mn > 0){
          setone$matchContour <- "probPlanktonShallowset"
        }
      }
      
      if(i > 12){
        
        #setting the oceanic province
        if(mn == 0){setone$oProvince <- "epipelagic and mesopelagic"}
        if(mn == 500){setone$oProvince <- "mesopelagic"}
        if(mn >= 1000 & mn < 4000){setone$oProvince <- "bathypelagic"}
        if(mn >= 4000){setone$oProvince <- "abyssopelagic"}
        
        if (mn == 0){
          setone$matchContour <- "shallowfromDeepset"
        }
        
        #merging into one datatable with the new field contours
        
        if (mn > 0){
          setone$matchContour <- "match"
          
          for(a in 1:nrow(setone)){
            if(setone$depth[a] >= 0 & setone$depth[a] < setone$minContour[a]){
              setone$matchContour[a] <- "probPlanktonDeepset"
            }
            if(setone$depth[a] >= setone$maxContour[a]){
              setone$matchContour[a] <- "diffmatch"
            }
          }
        }
      } 
      #rm(a)
    }
    
    if(mn == 0){
      settwo <- setone
    }
    
    if(mn > 0){
      settwo <- rbind(settwo, setone)
    }
    
    mn <- mn + 500
    mx <- mx + 500
    }  
  }
  
  assign(gsub(" ","",paste(names[i], "_diffmatch")),settwo)  
  rm(x,y,a, setone, setwo)
  #rm(z)
}


######

#These are the keeping objects
namesContoursprovinces <- gsub("worms", "worms_diffmatch", names)
namesContoursprovinces[25] <- "emodc_mkd_diffmatch"
namesContoursprovinces[26] <- "nexpd_mkd_diffmatch"


save.image("//home.ansatt.ntnu.no/lcgarcia/Documents/R/1876-2024_timeSeries.RData")


summary(tif)
.rs.unloadPackage("tidyr")

#sf::st_crs("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0")

rm(i,a,y,y0)
for(i in 1:length(namesContoursprovinces)){
  
  y0 <- get(namesContoursprovinces[i]) %>% filter(XCoord !=0 & YCoord !=0 & depth !=0)
  names(y0)[11] <- "id"
  y <- st_as_sf(x = y0,                         
                coords = c("XCoord", "YCoord"),
                crs = "+proj=longlat +datum=WGS84 +ellps=WGS84")
  
  y <- as(y, "Spatial")
  summary(y)
  
  for(a in 1:31){
    data <- data.frame(coordinates(y),
                       y$id, 
                       extract(get(gsub(" ","",paste("tif",a))), y))
    names(data) <- c("x", "y", "id", "value")
    
    if(a == 1){
      rasterfPoints <- data
    }
    
    if(a > 1){
      rasterfPoints <- rbind(rasterfPoints,data)
    }
  }
  
  rasterfPoints <- anti_join(rasterfPoints, (rasterfPoints %>% filter(is.na(value))))
  assign(gsub(" ","",paste(names[i],"_tifRaw")), rasterfPoints)
}

library(dplyr)

#rm(x,i)
#for (i in 1:length(namesContoursprovinces)){
#  x <- get(namesContoursprovinces[i])
#  names(x)[11] <- "id"
#  assign(namesContoursprovinces[i], x)
#}

rm(x,i)
for (i in 1:length(namesContoursprovinces)){
  x <- left_join((get(namesContoursprovinces[i])), get(gsub(" ","",paste(names[i],"_tifRaw"))), by = "id")
  assign(gsub(" ","",paste(names[i],"_tiffDepths")), x)
}

#These are the keeping objects
namesTiff <- gsub("worms", "worms_tiffDepths", names)
namesTiff[25] <- "emodc_mkd_tiffDepths"
namesTiff[26] <- "nexpd_mkd_tiffDepths"

save.image("//home.ansatt.ntnu.no/lcgarcia/Documents/R/1876-2024_timeSeries.RData")

###End of the script


#Dups

#III. Removing duplicates

#Removing duplicates + splitting in latitudes (if the input is a period of the time-series and the output is no-duplicates per latitudinal band for this period)

e <- 1
l <- 0
test <- c()

#splitting by latitudinal bands every degree and filtering out duplicates
rm(i)
for(i in 56:84){
  
  if (i < 61){
    for (j in 1:4) {
      l <- letters[j]
      test[e] <- gsub(" ","", paste("l",i,l))
      e = e +1
    }
  }
  
  else {
    l <- letters[j]
    test[e] <- gsub(" ","", paste("l",i))
    e = e +1
  }
}

rm(b,x)
b <- 1
srichness_ts <- c()
abundances_ts <- c()
occurrences_ts <- c()

for (b in 1:length(namesTiff)){
  f <- 1
  k <- 1
  m <- 1
  p <- 1
  init <- 55.95
  
  i <- 1
  mn <- 0
  mx <- 500
  
  for (i in 1:length(test)){
    
    mn <- 0
    mx <- 500
    
    x <- get(namesTiff[b])
    #splitting in NA and no NA parts to be able to perform the masking
    x_noNA <- x %>% filter(!is.na(x$decimalLongitude) | !is.na(x$decimalLatitude))
    x_NA <- x %>% filter(is.na(x$decimalLongitude) | is.na(x$decimalLatitude))
    
    if (i < 21) {
      x <- x_noNA %>% filter(decimalLatitude>= (init + 0.05) & decimalLatitude< (init + (0.05 + 0.25)))
      assign(test[i], x)
      init <- init + 0.25
    }
    
    if (i > 20 & i < 44) {
      x <- x_noNA %>% filter(decimalLatitude>= (init + 0.05) & decimalLatitude< (init + (0.05 + 1.00)))
      assign(test[i], x)
      init <- init + 1.00
    }  
    
    if (i == 44) {
      x <- x_noNA %>% filter(decimalLatitude>= (init + 0.05) & decimalLatitude<= (init + (0.05 + 1.00)))
      assign(test[i], x)
      init <- init + 1.00
    }
    
    g = x %>% filter(taxonRank == "FORM" | taxonRank == "Species" | taxonRank == "SPECIES" | taxonRank == "SUBSPECIES" | taxonRank == "UNRANKED" | taxonRank == "VARIETY" | is.na(taxonRank))
    assign(gsub(" ","", paste(test[i],"_sp")),g)
    
    df <- g
    df2 <- g
    k <- k + 1
    mylist <- list()
    link <- data.frame()
    
    while(k > 0){
      x <- print(df %>% filter(duplicated(df$decimalLatitude) & duplicated(df$decimalLongitude) & duplicated(df$depth) & duplicated(df$day) & duplicated(df$month) & duplicated(df$year) & duplicated(df$scientificName) & !duplicated (df$database)))
      #df <- anti_join(df, x, by = NULL)
      df = df[!(duplicated(df$decimalLatitude) & duplicated(df$decimalLongitude) & duplicated(df$depth) & duplicated(df$day) & duplicated(df$month) & duplicated(df$year) & duplicated(df$scientificName) & !duplicated (df$database)),]
      k <- nrow(x)
      mylist[[f]] <- x
      link <- do.call("rbind",mylist)
      f <- (nrow(link)) + 100
      assign(gsub(" ","",paste(test[i],"_sp_dups")), link)
    }
    
    if(i == 1){
      spp_level <- nrow(g)
      nodups <- as.data.frame(df)
    }
    
    if(i > 1){
      spp_level <- spp_level + nrow(g)
      nodups <- rbind(nodups,as.data.frame(df))
    }
    
    if(i == 44){
      #Generate the dataset with no duplicates
      nodups <- rbind(nodups,x_NA)
      assign(gsub(" ","",paste(names[b],"_nodups")), nodups)
      
      sp_list_abundances <- nodups %>% arrange(scientificName) %>% group_by(scientificName, kingdom, class, family) %>% summarise(abundance = sum(individualCount)) %>% filter(grepl("[a-zA-Z]{1,25}\\s{1}[a-z]{2,25}", scientificName))
      sp_list <- sp_list_abundances[c("scientificName","abundance")] %>% arrange(scientificName) %>% group_by(scientificName) %>% summarise(abundance = sum(abundance))
      
      #quantification of species richness
      srichness <- nrow(sp_list)
      
      #quantification of abundances
      abundances <- sum(sp_list$abundance)
      
      #quantification of occurrences
      occurrences <- nrow(nodups)
    }
  }  
  
  #Here the generation for srichness, abundances and occurrences per time slot, per depth
  
  srichness_ts[b] <- srichness
  abundances_ts[b] <- abundances
  occurrences_ts[b] <- occurrences
}

rm(all)
rm(a,e,f,k,h,l,m,p,z)
rm(i,b)

#save.image("//home.ansatt.ntnu.no/lcgarcia/Documents/R/1900_23_allmaskingandnodups.RData")


#These are the keeping objects
namesNodups <- gsub("worms", "worms_nodups", names)
namesNodups[25] <- "emodc_mkd_nodups"
namesNodups[26] <- "nexpd_mkd_nodups"

#leave only last objects before saving!
save.image("//home.ansatt.ntnu.no/lcgarcia/Documents/R/1876-2024_timeSeriesB.RData")

###End of the script

#Join
# Split Every 10yrs

#### Analysis

rm(a,x,i)

for(i in 1:length(namesNodups)){
  
  x <- get(namesNodups[i])
  
  for(a in 1:nrow(x)){
  
    if (x$value[a] < (x$depth[a] - x$depthAccuracy[a])){
      x$tiffmatch[a] <- "tiffPlankton"
    }
    
    if(x$value[a] > (x$depth[a] + x$depthAccuracy[a])){
      x$tiffmatch[a] <- "tiffBelowdepth"
    }
    
    if(x$value[a] < (x$depth[a] + x$depthAccuracy[a]) & x$value[a] > (x$depth[a] - x$depthAccuracy[a])){
      x$tiffmatch[a] <- "tiffBenthos"
    }
  }

  assign(gsub(" ","",paste(names[i],"_allPlanktonBenthos")), x) 

}

#These are the keeping objects
namesNodups <- gsub("worms", "worms_allPlanktonBenthos", names)
namesNodups[25] <- "emodc_mkd_allPlanktonBenthos"
namesNodups[26] <- "nexpd_mkd_allPlanktonBenthos"

save.image("//home.ansatt.ntnu.no/lcgarcia/Documents/R/1876-2024_timeSeriesB.RData")


#II. Getting the two depth intervals (0-500m and 500 and below)

namesShallow <- c()
namesDeep <- c()

rm(i, x, df)
for (i in 1:length(names)){
  
  df <- get(gsub(" ","",paste(names[i],"_extDepths")))
  namesShallow[i] <- gsub(" ","",paste(names[i],"_shallow"))
  namesDeep[i] <- gsub(" ","",paste(names[i],"_deep"))
  shallow <- df %>% filter(depth<500)
  assign(gsub(" ","",paste(names[i],"_shallow")),shallow)
  deep <- df %>% filter(depth>=500)
  assign(gsub(" ","",paste(names[i],"_deep")),deep)
  namesShallowDeep <- c(namesShallow, namesDeep)
} 
rm(i,shallow,deep)


