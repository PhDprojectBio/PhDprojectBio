#loading libraries and directory
setwd("//myDirectory/myFolder/myDocuments/R")

library(janitor)
library(tibble)
library(stringr)
library(dplyr)
library(data.table)
library(sf)
library(s2)
library(stars)
library(ggplot2)
library(wdpar)
library(vegan)


names <- ls()
names <- names[21:32]
names

#II. Getting the two depth intervals (0-500m and 500 and below)

namesShallow <- c()
namesDeep <- c()

for (i in 1:length(names)){
  
  df <- get(names[i])
  namesShallow[i] <- gsub(" ","",paste(names[i],"_shallow"))
  namesDeep[i] <- gsub(" ","",paste(names[i],"_deep"))
  shallow <- df %>% filter(depth<500)
  assign(gsub(" ","",paste(names[i],"_shallow")),shallow)
  deep <- df %>% filter(depth>=500)
  assign(gsub(" ","",paste(names[i],"_deep")),deep)
  namesShallowDeep <- c(namesShallow, namesDeep)
} 
rm(i,shallow,deep)

#III. Assigning new fields

library("ggplot2")
library("sf")
library("rnaturalearth")
library("rnaturalearthdata")
library("ggspatial")

#There are records that register depths in a different contour than they are supposed to be. Here we mask by contour first, tehn they can be plotted (applying the masking correction that comes in the block below first.
#This is based on the content of the script 3a. This is for register of the min and max contours. Consider merging with the last script.

rm(i,x,a)
for (i in 1:length(namesShallowDeep)){
  
  mn <- 0
  mx <- 500
  
  while (mn < 6000){
    
    x <- st_read(as.character(gsub(" ","",paste("contour",mn,"_",mx,".shp"))))
    
    y0 <- get(namesShallowDeep[i])
    y0$XCoord <- y0$decimalLongitude
    y0$YCoord <- y0$decimalLatitude
    
    if(i == 1 | i == 13){
      dbs_mkd_taxa_new1xxx_1899_coordinated <- y0 %>% filter(XCoord != 0 | YCoord != 0)
      y <- st_as_sf(x = dbs_mkd_taxa_new1xxx_1899_coordinated,                         
                    coords = c("XCoord", "YCoord"),
                    crs = 4326)
    }
    
    if((i > 1 & i < 13) | (i > 13)){
      y <- st_as_sf(x = y0,                         
                    coords = c("XCoord", "YCoord"),
                    crs = 4326)
    }
    
    y_int <- st_intersects(y,x)
    y_log <- lengths(y_int) > 0 
    mkd <- y[y_log, ]
    
    mkd$XCoord <- st_coordinates(mkd$geometry)[,1]
    mkd$YCoord <- st_coordinates(mkd$geometry)[,2]
    
    mkd <- as.data.frame(mkd)
    
    if(nrow(mkd) > 0){
      mkd$minContour <- mn
      mkd$maxContour <- mx
    }
    
    assign(gsub(" ","",paste(namesShallowDeep[i],"_mkd_",mn,"_",mx)), mkd)
    
    if(nrow(mkd) > 0){
      if (mn == 0){
        mkd_allcont <- mkd
      }
      
      if (mn > 0){
        mkd_allcont <- rbind(mkd_allcont,mkd)
      }
    }
    
    mn <- mn + 500
    mx <- mx + 500
    
    rm(a)
  }
  
  #get the set that probably correspond to the polygon and graphically represent the result to confirm it and join to the corresponding depth (0to500)
  if(i == 1 | i == 13){
    polygon <- anti_join(as.data.frame(dbs_mkd_taxa_new1xxx_1899_coordinated),as.data.frame(mkd_allcont))
  }
  
  if((i > 1 & i < 13) | (i > 13)){
    polygon <- anti_join(as.data.frame(y0),as.data.frame(mkd_allcont))
  }
  
  if(nrow(polygon) > 0){
    polygon$minContour <- 0
    polygon$maxContour <- 500
  }
  
  polcontour <- rbind(get(gsub(" ","",paste(namesShallowDeep[i],"_mkd_0_500"))), polygon)
  assign(gsub(" ","",paste(namesShallowDeep[i],"_mkd_0_500")), polcontour)
  
  
  rm(x,y,a, mkd)
  #rm(z)
}

#For masking the landshape outliers with the "world" dataframe, represented as a landshape.
#Ocean provinces are assigned and correspondence with contours is writen in the field matchContours.

rm(i,x,a, mn, mx,setone,settwo,y)
for (i in 1:length(namesShallowDeep)){
  
  mn <- 0
  mx <- 500
  
  while (mn < 6000){
    
    setone <- get(gsub(" ","",paste(namesShallowDeep[i],"_mkd_",mn,"_",mx)))
    
    #Assigning new fields
    
    if(nrow(setone) > 0){
      setone$matchContour <- "pendmatch" #to see if there is any without classification afterwards
      
      if (i < 13){
        
        #setting the oceanic province
        setone$oProvince <- "epipelagic and mesopelagic"
        
        if (mn == 0){
          setone$matchContour <- "match"
          
          for(a in 1:nrow(setone)){
            if(setone$depth[a] >= 500){
              setone$matchContour[a] <- "diffmatch"
            }
          }
        }
        
        #merging into one datatable with the new field contours
        
        if (mn > 0){
          setone$matchContour <- "probPlanktonShallowset"
        }
      }
      
      if(i > 12){
        
        #setting the oceanic province
        if(mn == 0){setone$oProvince <- "epipelagic and mesopelagic"}
        if(mn == 500){setone$oProvince <- "mesopelagic"}
        if(mn >= 1000 & mn < 4000){setone$oProvince <- "bathypelagic"}
        if(mn >= 4000){setone$oProvince <- "abyssopelagic"}
        
        if (mn == 0){
          setone$matchContour <- "shallowfromDeepset"
        }
        
        #merging into one datatable with the new field contours
        
        if (mn > 0){
          setone$matchContour <- "match"
          
          for(a in 1:nrow(setone)){
            if(setone$depth[a] >= 0 & setone$depth[a] < setone$minContour[a]){
              setone$matchContour[a] <- "probPlanktonDeepset"
            }
            if(setone$depth[a] >= setone$maxContour[a]){
              setone$matchContour[a] <- "diffmatch"
            }
          }
        }
      } 
      #rm(a)
    }
    
    if(mn == 0){
      settwo <- setone
    }
    
    if(mn > 0){
      settwo <- rbind(settwo, setone)
    }
    
    mn <- mn + 500
    mx <- mx + 500
    
  }
  
  assign(gsub(" ","",paste(namesShallowDeep[i], "_diffmatch")),settwo)  
  rm(x,y,a, setone, setwo)
  #rm(z)
}

#To plot, these are the keeping objects and the labels for the years
namesShallowPlot <- gsub("shallow", "shallow_diffmatch", namesShallow)
namesDeepPlot <- gsub("deep", "deep_diffmatch", namesDeep)
namesShallowDeepPlot <- c(namesShallowPlot,namesDeepPlot)
yearsLabels <- c("1876-1899", "1900-1949", "1950-1959", "1960-1969", "1970-1979", "1980-1989", "1990-1999", "2000-2004", "2005-2009", "2010-2014", "2015-2019", "2020-2023")


#save.image("//home.ansatt.ntnu.no/lcgarcia/Documents/R/1900_23_tiffs.RData")
xyz

summary(tif)
.rs.unloadPackage("tidyr")

#sf::st_crs("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0")

rm(i,a,y,y0)
for(i in 1:length(namesShallowDeepPlot)){
  
  y0 <- get(namesShallowDeepPlot[i]) %>% filter(XCoord !=0 & YCoord !=0 & depth !=0)
  names(y0)[11] <- "id"
  y <- st_as_sf(x = y0,                         
                coords = c("XCoord", "YCoord"),
                crs = "+proj=longlat +datum=WGS84 +ellps=WGS84")
  
  y <- as(y, "Spatial")
  summary(y)
  
  for(a in 1:31){
    data <- data.frame(coordinates(y),
                       y$id, 
                       extract(get(gsub(" ","",paste("tif",a))), y))
    names(data) <- c("x", "y", "id", "value")
    
    if(a == 1){
      rasterfPoints <- data
    }
    
    if(a > 1){
      rasterfPoints <- rbind(rasterfPoints,data)
    }
  }
  
  rasterfPoints <- anti_join(rasterfPoints, (rasterfPoints %>% filter(is.na(value))))
  assign(gsub(" ","",paste(namesShallowDeepPlot[i],"_tif")), rasterfPoints)
}

save.image("//home.ansatt.ntnu.no/lcgarcia/Documents/R/1876_2024_sjGbif.RData")








###End of the script
