#plotting

setwd("//home.ansatt.ntnu.no/lcgarcia/Documents/R")

library(janitor)
library(tibble)
library(stringr)
library(dplyr)
library(data.table)
library(sf)
library(s2)
library(stars)
library(ggplot2)
library(wdpar)
library(readxl)

#plotting for <500m

#xlab = "latitude", xaxt = 'n')
#axis(side=1,at=sites, labels = rev(sites))

#getting ready. Adapted from: https://r-spatial.org/r/2018/10/25/ggplot2-sf.html
#install.packages(c("cowplot", "googleway", "ggplot2", "ggrepel", 
#"ggspatial", "libwgeom", "sf", "rnaturalearth", "rnaturalearthdata"))

library("ggplot2")
theme_set(theme_bw())
library("sf")

library("rnaturalearth")
library("rnaturalearthdata")

world <- ne_countries(scale = "medium", returnclass = "sf")
class(world)

## [1] "sf"  
## [1] "data.frame"
#load("~/R/1900_23_df.RData")

#install.packages("ggspatial")
library("ggspatial")


#To add to the list of datasets (use once)
#namesShallow <- c("dbs_mkd_taxa_new1xxx_1899_shallow",namesShallow)
#namesDeep <- c("dbs_mkd_taxa_new1xxx_1899_deep",namesDeep)
#namesShallowDeep <- c(namesShallow, namesDeep)

#there are records that register depths in a different contour than they are supposed to be
#contouring to place them in red

#layer <- layer[-22]
#llayer <- layer
layer_shallow <- layer %>% filter(depth<500)
layer_deep <- layer %>% filter(depth>=500)

namesShallowDeep <- c("layer_shallow", "layer_deep")

rm(i,x,a)
mkd_allcont <- data.frame()
for (i in 1:length(namesShallowDeep)){
  
  mn <- 0
  mx <- 500
  
  while (mn < 6000){
    
    x <- st_read(as.character(gsub(" ","",paste("contour",mn,"_",mx,".shp"))))
    
    #y <- st_as_sf(x = layer,                         
     #                coords = c("XCoord", "YCoord"),
      #               crs = 4326)
      
    #if(i == 1 | i == 13){
    #  dbs_mkd_taxa_new1xxx_1899_coordinated <- get(namesShallowDeep[i]) %>% filter(XCoord != 0 | YCoord != 0)
    #  y <- st_as_sf(x = dbs_mkd_taxa_new1xxx_1899_coordinated,                         
    #                coords = c("XCoord", "YCoord"),
    #                crs = 4326)
    #}
    
    #if((i > 1 & i < 13) | (i > 13)){
      y <- st_as_sf(x = get(namesShallowDeep[i]),                         
                    coords = c("XCoord", "YCoord"),
                    crs = 4326)
    #}
    
    y_int <- st_intersects(y,x)
    y_log <- lengths(y_int) > 0 
    mkd <- y[y_log, ]
    
    mkd$XCoord <- st_coordinates(mkd$geometry)[,1]
    mkd$YCoord <- st_coordinates(mkd$geometry)[,2]
    
    mkd <- as.data.frame(mkd)
    
    if(nrow(mkd) > 0){
      mkd$minContour <- mn
      mkd$maxContour <- mx
    }
    
    #assign(gsub(" ","",paste("layer","_mkd_",mn,"_",mx)), mkd)
    assign(gsub(" ","",paste(namesShallowDeep[i],"_mkd_",mn,"_",mx)), mkd)
    
    if (mn == 0){
      mkd_allcont <- mkd
    }
    
    if (mn > 0){
      mkd_allcont <- rbind(mkd_allcont,mkd)
    }
    
    mn <- mn + 500
    mx <- mx + 500
    
    rm(a)
  }
  
  #get the set that probably correspond to the polygon and graphically represent the result to confirm it and join to the corresponding depth (0to500)
  #if(i == 1 | i == 13){
   # polygon <- anti_join(as.data.frame(dbs_mkd_taxa_new1xxx_1899_coordinated),as.data.frame(mkd_allcont))
  #}
  
  #if((i > 1 & i < 13) | (i > 13)){
  #  polygon <- anti_join(as.data.frame(get(namesShallowDeep[i])),as.data.frame(mkd_allcont))
  #}
  
  y$XCoord <- st_coordinates(y$geometry)[,1]
  y$YCoord <- st_coordinates(y$geometry)[,2]
  
  polygon <- as.data.frame(anti_join(y,mkd_allcont, by = "id"))
  
  #x <- st_read("all_landshape.shp")
  #y <- st_read("contour0_500.shp")
  #z <- st_as_sf(x = polygon,                         
  #             coords = c("XCoord", "YCoord"),
  #            crs = 4326)
  #ggplot() +
  # geom_sf(data = x) +
  # geom_sf(data = y) +
  # scale_fill_viridis_c() +
  # geom_sf(data = z) 
  
  if(nrow(polygon) > 0){
    polygon$minContour <- 0
    polygon$maxContour <- 500
  }
  
  #polcontour <- rbind(get(gsub(" ","",paste("layer","_mkd_0_500"))), polygon)
  polcontour <- rbind(get(gsub(" ","",paste(namesShallowDeep[i],"_mkd_0_500"))), polygon)
  #assign(gsub(" ","",paste("layer","_mkd_0_500")), polcontour)
  assign(gsub(" ","",paste(namesShallowDeep[i],"_mkd_0_500")), polcontour)
  
  rm(x,y,a, mkd)
  #rm(z)
}

#to subset the timeslots in red and black. Red for the points that do not match their depths from de database and the assigned one by the matching bathymetric contour
#masking the land from the polygon that was pending before

rm(i,x,a, mn, mx,setone,settwo,y)
world2 <- st_crop(world, xmin = -27, ymin = 50, xmax = 38, ymax = 85)
#settwo <- data.frame()
for (i in 1:length(namesShallowDeep)){
  
  mn <- 0
  mx <- 500
  #i <- 1
  while (mn < 6000){
    
    setone <- get(gsub(" ","",paste(namesShallowDeep[i],"_mkd_",mn,"_",mx)))
    #setone <- get(gsub(" ","",paste("layer","_mkd_",mn,"_",mx)))

    #last correction: masking shallow with "world"
    x <- world2
    
    y <- st_as_sf(x = setone,                         
                  coords = c("XCoord", "YCoord"),
                  crs = 4326)
    
    y_int <- st_intersects(y,x)
    y_log <- lengths(y_int) == 0 
    setone_mkd <- y[y_log, ]
    
    setone_mkd$XCoord <- st_coordinates(setone_mkd$geometry)[,1]
    setone_mkd$YCoord <- st_coordinates(setone_mkd$geometry)[,2]
    
    setone <- as.data.frame(setone_mkd)
     
    #Assigning new fields
    
    if(nrow(setone) > 0){
      setone$matchContour <- "pendmatch" #to see if there is any without classification afterwards
      
      #if (i < 13){
      if (i == 1){
        
        #setting the oceanic province
        setone$oProvince <- "epipelagic and mesopelagic"
        
        if (mn == 0){
          setone$matchContour <- "match"
          
          for(a in 1:nrow(setone)){
            if(setone$depth[a] >= 500){
              setone$matchContour[a] <- "diffmatch"
            }
          }
        }
        
        #merging into one datatable with the new field contours
        
        if (mn > 0){
          setone$matchContour <- "probPlanktonShallowset"
        }
      }
      
      #if(i > 12){
      if(i == 2){
      
        #setting the oceanic province
        if(mn == 0){setone$oProvince <- "epipelagic and mesopelagic"}
        if(mn == 500){setone$oProvince <- "mesopelagic"}
        if(mn >= 1000 & mn < 4000){setone$oProvince <- "bathypelagic"}
        if(mn >= 4000){setone$oProvince <- "abyssopelagic"}
        
        if (mn == 0){
          setone$matchContour <- "shallowfromDeepset"
        }
        
        #merging into one datatable with the new field contours
        
        if (mn > 0){
          setone$matchContour <- "match"
          
          for(a in 1:nrow(setone)){
            if(setone$depth[a] >= 0 & setone$depth[a] < setone$minContour[a]){
              setone$matchContour[a] <- "probPlanktonDeepset"
            }
            if(setone$depth[a] >= setone$maxContour[a]){
              setone$matchContour[a] <- "diffmatch"
            }
          }
        }
      } 
      #rm(a)
    }
  }}   
    if(mn == 0){
      settwo <- setone
    }
    
    if(mn > 0){
      settwo <- rbind(settwo, setone)
    }
      
    mn <- mn + 500
    mx <- mx + 500
    
  }
 
  assign(gsub(" ","",paste(namesShallowDeep[i], "_diffmatch")),settwo)
  #assign(gsub(" ","",paste("layer", "_diffmatch")),settwo) 
  rm(x,y,a, setone, setwo)
  #rm(z)
}

namesShallowPlot <- gsub("shallow", "shallow_diffmatch", namesShallow)
namesDeepPlot <- gsub("deep", "deep_diffmatch", namesDeep)
namesShallowDeepPlot <- c(namesShallowPlot,namesDeepPlot)

yearsLabels <- c("1876-1899", "1900-1949", "1950-1959", "1960-1969", "1970-1979", "1980-1989", "1990-1999", "2000-2004", "2005-2009", "2010-2014", "2015-2019", "2020-2023")

#See example of diff matches
#rm(i)
#for (i in 1:length(namesShallowDeep)){
 # print((get(gsub(" ","",paste(namesShallowDeep[23], "_diffmatch"))))[829,])
#}

#IV. Removing duplicates + splitting in latitudes (if the input is a period of the time-series and the output is no-duplicates per latitudinal band for this period)
#Reccommended to pass many times to not to leave duplicates (seems that they remain a bit?...)

e <- 1
l <- 0
test <- c()

#splitting by latitudinal bands every degree and filtering out duplicates
rm(i)
for(i in 56:84){
  
  if (i < 61){
    for (j in 1:4) {
      l <- letters[j]
      test[e] <- gsub(" ","", paste("l",i,l))
      e = e +1
    }
  }
  
  else {
    l <- letters[j]
    test[e] <- gsub(" ","", paste("l",i))
    e = e +1
  }
}

rm(b,x)
b <- 1
srichness_ts <- c()
abundances_ts <- c()
occurrences_ts <- c()

for (b in 1:length(namesShallowDeepPlot)){
  f <- 1
  k <- 1
  m <- 1
  p <- 1
  init <- 55.95
  
  i <- 1
  mn <- 0
  mx <- 500
  
  for (i in 1:length(test)){
    
    mn <- 0
    mx <- 500
    
    if (i < 21) {
      x <- get(namesShallowDeepPlot[b]) %>% filter(YCoord>= (init + 0.05) & YCoord< (init + (0.05 + 0.25)))
      assign(test[i], x)
      init <- init + 0.25
    }
    
    if (i > 20 & i < 44) {
      x <- get(namesShallowDeepPlot[b]) %>% filter(YCoord>= (init + 0.05) & YCoord< (init + (0.05 + 1.00)))
      assign(test[i], x)
      init <- init + 1.00
    }  
    
    if (i == 44) {
      x <- get(namesShallowDeepPlot[b]) %>% filter(YCoord>= (init + 0.05) & YCoord<= (init + (0.05 + 1.00)))
      assign(test[i], x)
      init <- init + 1.00
    }
    
    g = x %>% filter(taxonRank == "FORM" | taxonRank == "Species" | taxonRank == "SPECIES" | taxonRank == "SUBSPECIES" | taxonRank == "UNRANKED" | taxonRank == "VARIETY" | is.na(taxonRank))
    assign(gsub(" ","", paste(test[i],"_sp")),g)
    
    df <- g
    df2 <- g
    k <- k + 1
    mylist <- list()
    link <- data.frame()
    
    while(k > 0){
      x <- print(df %>% filter(duplicated(df$YCoord) & duplicated(df$XCoord) & duplicated(df$depth) & duplicated(df$day) & duplicated(df$month) & duplicated(df$year) & duplicated(df$scientificName) & !duplicated (df$database)))
      #df <- anti_join(df, x, by = NULL)
      df = df[!(duplicated(df$YCoord) & duplicated(df$XCoord) & duplicated(df$depth) & duplicated(df$day) & duplicated(df$month) & duplicated(df$year) & duplicated(df$scientificName) & !duplicated (df$database)),]
      k <- nrow(x)
      mylist[[f]] <- x
      link <- do.call("rbind",mylist)
      f <- (nrow(link)) + 100
      assign(gsub(" ","",paste(test[i],"_sp_dups")), link)
    }
    
    if(i == 1){
      spp_level <- nrow(g)
      nodups <- as.data.frame(df)
    }
    
    if(i > 1){
      spp_level <- spp_level + nrow(g)
      nodups <- rbind(nodups,as.data.frame(df))
    }
    
    if(i == 44){
      #Generate the datataset with no duplicates
      assign(gsub(" ","",paste(namesShallowDeepPlot[b],"_nodups")), nodups)
      
      sp_list_abundances <- nodups %>% arrange(scientificName) %>% group_by(scientificName, kingdom, class, family) %>% summarise(abundance = sum(individualCount)) %>% filter(grepl("[a-zA-Z]{1,25}\\s{1}[a-z]{2,25}", scientificName))
      sp_list <- sp_list_abundances[c("scientificName","abundance")] %>% arrange(scientificName) %>% group_by(scientificName) %>% summarise(abundance = sum(abundance))
      
      #quantification of species richness
      srichness <- nrow(sp_list)
      
      #quantification of abundances
      abundances <- sum(sp_list$abundance)
      
      #quantification of occurrences
      occurrences <- nrow(nodups)
    }
  }  
  
  #Here the generation for srichness, abundances and occurrences per time slot, per depth
  
  srichness_ts[b] <- srichness
  abundances_ts[b] <- abundances
  occurrences_ts[b] <- occurrences
}

rm(all)
rm(a,e,f,k,h,l,m,p,z)
rm(i,b)

#save.image("//home.ansatt.ntnu.no/lcgarcia/Documents/R/1900_23_allmaskingandnodups.RData")

#For plots

namesShallowNodups <- gsub("shallow_diffmatch", "shallow_diffmatch_nodups", namesShallowPlot)
namesDeepNodups <- gsub("deep_diffmatch", "deep_diffmatch_nodups", namesDeepPlot)
namesShallowDeepNodups <- c(namesShallowNodups,namesDeepNodups)




###########################


##Request from EMODnet

# load dependencies
## geospatial data handling
library(rgdal)
library(raster)
library(sp)
library(mapdata)
library(ncdf4)
library(XML)
library(dplyr)
library(tidyr)
library(reshape2)
library(downloader)
library(directlabels)
library(rasterVis)
library(ggplot2)
library(knitr)
library(IRdisplay)
library(repr)
library(sf)

remotes::install_github("EMODnet/EMODnetWFS")
library("EMODnetWFS")
#View(emodnet_wfs())
wfs_bathy <- emodnet_init_wfs_client(service = "bathymetry")
info <- emodnet_get_wfs_info(wfs_bathy)
wfs_bio <- emodnet_init_wfs_client(service = "biology_occurrence_data")
info <- emodnet_get_wfs_info(wfs_bio)

xmin= -3005627
ymin= 7558415
xmax= 4230141
ymax= 19971869

bathy <- emodnet_get_layers(
  service = "bathymetry",
  layers = c("download_tiles"), 
  #BBOX = paste(xmin,ymin,xmax,ymax,sep=",")
)

bathy <- bathy[["download_tiles"]]
View(bathy)
#tif: 2:32
#xyz: 504:474
#2:32
#rm(i)
#i <- 1
urls <- bathy$download_url[2:32] #Goes to D rows
for(i in 1:length(urls)){

  download.file(url=urls[i],
              destfile=gsub(" ","",paste("tile_",i,"2022.tif.zip")))
  #unzip(zipfile = gsub(" ","",paste("tile_",i,"2022.tif.zip")), exdir = "\\\\home.ansatt.ntnu.no/lcgarcia/Documents/R")
  route <- unzip(zipfile = gsub(" ","",paste("tile_",i,"2022.tif.zip")), exdir = "\\\\home.ansatt.ntnu.no/lcgarcia/Documents/R")
  tif <- raster(route)
  #xyz = rasterToPoints(tif, spatial = TRUE)
  assign(gsub(" ","",paste("tif",i)), tif)
  #writeOGR(xyz,"\\\\home.ansatt.ntnu.no/lcgarcia/Documents/R",gsub(" ","",paste("output_name.shp",i)), driver="ESRI Shapefile")
}

save.image("//home.ansatt.ntnu.no/lcgarcia/Documents/R/1900_23_tiffs.RData")
xyz

summary(tif)

#sf::st_crs("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0")

rm(i,a,y)
for(i in 1:length(namesShallowDeepPlot)){
  
  dbs_mkd_taxa_new <- get(namesShallowDeepPlot[i]) %>% filter(XCoord !=0 & YCoord !=0 & depth !=0)
  y <- st_as_sf(x = dbs_mkd_taxa_new,                         
                coords = c("XCoord", "YCoord"),
                crs = "+proj=longlat +datum=WGS84 +ellps=WGS84")
  
  y <- as(y, "Spatial")
  summary(y)

#.rs.unloadPackage("tidyr")

  for(a in 1:31){
    data <- data.frame(coordinates(y),
                       y$id, 
                       extract(get(gsub(" ","",paste("tif",a))), y))
    names(data) <- c("x", "y", "id", "value")
    
    if(a == 1){
      rasterfPoints <- data
    }
    
    if(a > 1){
      rasterfPoints <- rbind(rasterfPoints,data)
    }
  }
  
  rasterfPoints <- anti_join(rasterfPoints, (rasterfPoints %>% filter(is.na(value))))
  assign(gsub(" ","",paste(namesShallowDeepPlot[i],"_tif")), rasterfPoints)
}

#compare numbers after charging obis
#Then join to each by id and with the +- range of depthAccuracy (this in the discussion). Mean depth accuracy for the other records???... And report new column! Planktic benthic. &Final plots!!!!
#Only in case of: sf::st_crs("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0")
#Convert the DEM elevation Data to Point using Raster to Point
#Use the tool Near if you have an advanced license.
#Use a Spatial Join if you do not have an advanced license.
#If your input is a line then use points along line before step 2.

#The GME plug-in will do this in ArcGIS Desktop as well.

#https://gis.stackexchange.com/questions/397696/alternatives-to-add-surface-information-and-extract-values-from-points

xmin= -27
ymin= 56
xmax= 38
ymax= 85

layer <- emodnet_get_layers(
  service = "biology_occurrence_data",
  layers = c("eurobis-obisenv"), 
  BBOX = paste(xmin,ymin,xmax,ymax,sep=",")
)

layer <- layer[["eurobis-obisenv"]]

#Formatting EMODnet accordingly to GBIF+OBIS fields

names(dbs_mkd_taxa_new1900_49_deep_diffmatch_nodups)
names(layer)


### Apply the filters

#layerbu <- layer
#layer <- layerbu
layer <- layer[,c(35,50,4,66,16,37,38,79,52,2,68,57,48,13,40,43,10,123,29,32)]
names(layer)

layer <- as.data.frame(layer)

names(layer)[1] <- names(dbs_mkd_taxa_new1900_49_deep_diffmatch_nodups)[1] #"coordinateuncertaintyinmeters" to "coordinateUncertaintyInMeters"
names(layer)[3] <- names(dbs_mkd_taxa_new1900_49_deep_diffmatch_nodups)[3] #"datasetid" to "dataset" 
names(layer)[4] <- names(dbs_mkd_taxa_new1900_49_deep_diffmatch_nodups)[4] #"dayidentified" to "dateIdentified"
names(layer)[5] <- names(dbs_mkd_taxa_new1900_49_deep_diffmatch_nodups)[5] #"daycollected" to "day"
#to calculate a (mean) value for the depth
layer$depth <- (layer$minimumdepthinmeters + layer$maximumdepthinmeters)/2
#remove one of the columns for depth
layer <- layer[-7]
layer[6] <- layer[20]
layer <- layer[-20]
names(layer)
names(layer)[6] <- names(dbs_mkd_taxa_new1900_49_deep_diffmatch_nodups)[6] #"minimumdepthinmeters"and "maximumdepthinmeters" to "depth" (mean)
names(layer)[7] <- names(dbs_mkd_taxa_new1900_49_deep_diffmatch_nodups)[7] #"depthrange" to "depthAccuracy"
names(layer)[10] <- names(dbs_mkd_taxa_new1900_49_deep_diffmatch_nodups)[10] #"samplingeffort" to "individualCount"
names(layer)[11] <- names(dbs_mkd_taxa_new1900_49_deep_diffmatch_nodups)[11] #"occurrenceremarks" to "flags"
names(layer)[13] <- names(dbs_mkd_taxa_new1900_49_deep_diffmatch_nodups)[13] #"monthcollected" to "month"
names(layer)[14] <- names(dbs_mkd_taxa_new1900_49_deep_diffmatch_nodups)[14] #"scientificname" to "scientificName"
names(layer)[15] <- names(dbs_mkd_taxa_new1900_49_deep_diffmatch_nodups)[15] #"taxonrank" to "taxonRank"
names(layer)[16] <- names(dbs_mkd_taxa_new1900_49_deep_diffmatch_nodups)[16] #"yearcollected" to "year"
names(layer)
names(dbs_mkd_taxa_new1900_49_deep_diffmatch_nodups)
layer$database <- "emodnet"
layer <- layer[-17]
names(layer)
layer$XCoord <- layer$decimallatitude
layer$YCoord <- layer$decimallongitude
layer$decimalLatitude <- layer$YCoord
layer$decimalLongitude <- layer$XCoord
layer <- layer[-17]
layer <- layer[-17]
names(layer)

databases <- layer

#Pass all the algorithm for EMODnet

#From script 2a
#II. Masking the landshape out of databases

x <- st_read("all_landshape.shp")

y <- st_as_sf(x = databases,                         
              coords = c("XCoord", "YCoord"),
              crs = 4326)

y_int <- st_intersects(y,x)
y_log <- lengths(y_int) == 0 
databases_mkd <- y[y_log, ]

databases_mkd$XCoord = databases_mkd$decimalLongitude
databases_mkd$YCoord = databases_mkd$decimalLatitude

names(databases_mkd)

databases_mkd <- databases_mkd[-18]
#Run script 2b
#Run script 3a

#From script 3b

#df <- dbs_mkd_taxa_new
df <- databases_mkd
shallow <- df %>% filter(depth<500)
deep <- df %>% filter(depth>=500)


library("ggplot2")
theme_set(theme_bw())
library("sf")
library("rnaturalearth")
library("rnaturalearthdata")
library("ggspatial")

#Importing world landshape from the contents of https://r-spatial.org/r/2018/10/25/ggplot2-sf.html
world <- ne_countries(scale = "medium", returnclass = "sf")
class(world)

#There are records that register depths in a different contour than they are supposed to be. Here we mask by contour first, tehn they can be plotted (applying the masking correction that comes in the block below first.
#This is based on the content of the script 3a. This is for register of the min and max contours. Consider merging with the last script.

rm(i,x,a)
#namesShallowDeepbu <- namesShallowDeep
namesShallowDeep <- c("shallow","deep")
for (i in 1:length(namesShallowDeep)){
  
  mn <- 0
  mx <- 500
  
  while (mn < 6000){
    
    x <- st_read(as.character(gsub(" ","",paste("contour",mn,"_",mx,".shp"))))
    
    #if(i == 1 | i == 13){
     # dbs_mkd_taxa_new1xxx_1899_coordinated <- get(namesShallowDeep[i]) %>% filter(XCoord != 0 | YCoord != 0)
    #  y <- st_as_sf(x = dbs_mkd_taxa_new1xxx_1899_coordinated,                         
     #               coords = c("XCoord", "YCoord"),
      #              crs = 4326)
   # }
    
   # if((i > 1 & i < 13) | (i > 13)){
      y <- st_as_sf(x = get(namesShallowDeep[i]),                         
                    coords = c("XCoord", "YCoord"),
                    crs = 4326)
   # }
    
    y_int <- st_intersects(y,x)
    y_log <- lengths(y_int) > 0 
    mkd <- y[y_log, ]
    
    mkd$XCoord <- st_coordinates(mkd$geometry)[,1]
    mkd$YCoord <- st_coordinates(mkd$geometry)[,2]
    
    mkd <- as.data.frame(mkd)
    
    if(nrow(mkd) > 0){
      mkd$minContour <- mn
      mkd$maxContour <- mx
    }
    
    assign(gsub(" ","",paste(namesShallowDeep[i],"_mkd_",mn,"_",mx)), mkd)
    
    if (mn == 0){
      mkd_allcont <- mkd
    }
    
    if (mn > 0){
      mkd_allcont <- rbind(mkd_allcont,mkd)
    }
    
    mn <- mn + 500
    mx <- mx + 500
    
    rm(a)
  }
  
  #get the set that probably correspond to the polygon and graphically represent the result to confirm it and join to the corresponding depth (0to500)
  #if(i == 1 | i == 13){
  #  polygon <- anti_join(as.data.frame(dbs_mkd_taxa_new1xxx_1899_coordinated),as.data.frame(mkd_allcont))
  #}
  
  #if((i > 1 & i < 13) | (i > 13)){
    polygon <- anti_join(as.data.frame(get(namesShallowDeep[i])),as.data.frame(mkd_allcont))
  #}
  
  #x <- st_read("all_landshape.shp")
  #y <- st_read("contour0_500.shp")
  #z <- st_as_sf(x = polygon,                         
  #             coords = c("XCoord", "YCoord"),
  #            crs = 4326)
  #ggplot() +
  # geom_sf(data = x) +
  # geom_sf(data = y) +
  # scale_fill_viridis_c() +
  # geom_sf(data = z) 
  
  if(nrow(polygon) > 0){
    polygon$minContour <- 0
    polygon$maxContour <- 500
  }
  
  polcontour <- rbind(get(gsub(" ","",paste(namesShallowDeep[i],"_mkd_0_500"))), polygon)
  assign(gsub(" ","",paste(namesShallowDeep[i],"_mkd_0_500")), polcontour)
  
  
  rm(x,y,a, mkd)
  #rm(z)
}

#For masking the landshape outliers with the "world" dataframe, represented as a landshape.
#Ocean provinces are assigned and correspondence with contours is writen in the field matchContours.

rm(i,x,a, mn, mx,setone,settwo,y)
world2 <- st_crop(world, xmin = -27, ymin = 50, xmax = 38, ymax = 85)
i <-1
for (i in 1:length(namesShallowDeep)){
  
  mn <- 0
  mx <- 500
  
  while (mn < 6000){
    
    setone <- get(gsub(" ","",paste(namesShallowDeep[i],"_mkd_",mn,"_",mx)))
    
    #last correction: masking shallow with "world"
    x <- world2
    
    y <- st_as_sf(x = setone,                         
                  coords = c("XCoord", "YCoord"),
                  crs = 4326)
    
    y_int <- st_intersects(y,x)
    y_log <- lengths(y_int) == 0 
    setone_mkd <- y[y_log, ]
    
    setone_mkd$XCoord <- st_coordinates(setone_mkd$geometry)[,1]
    setone_mkd$YCoord <- st_coordinates(setone_mkd$geometry)[,2]
    
    setone <- as.data.frame(setone_mkd)
    
    #Assigning new fields
    
    if(nrow(setone) > 0){
      setone$matchContour <- "pendmatch" #to see if there is any without classification afterwards
      
      if (i == 1){
      #if (i < 13){
        
        #setting the oceanic province
        setone$oProvince <- "epipelagic and mesopelagic"
        
        if (mn == 0){
          setone$matchContour <- "match"
          
          for(a in 1:nrow(setone)){
            if(setone$depth[a] >= 500){
              setone$matchContour[a] <- "diffmatch"
            }
          }
        }
        
        #merging into one datatable with the new field contours
        
        if (mn > 0){
          setone$matchContour <- "probPlanktonShallowset"
        }
      }
      
      if (i == 2){
      #if(i > 12){
        
        #setting the oceanic province
        if(mn == 0){setone$oProvince <- "epipelagic and mesopelagic"}
        if(mn == 500){setone$oProvince <- "mesopelagic"}
        if(mn >= 1000 & mn < 4000){setone$oProvince <- "bathypelagic"}
        if(mn >= 4000){setone$oProvince <- "abyssopelagic"}
        
        if (mn == 0){
          setone$matchContour <- "shallowfromDeepset"
        }
        
        #merging into one datatable with the new field contours
        
        if (mn > 0){
          setone$matchContour <- "match"
          
          for(a in 1:nrow(setone)){
            if(setone$depth[a] >= 0 & setone$depth[a] < setone$minContour[a]){
              setone$matchContour[a] <- "probPlanktonDeepset"
            }
            if(setone$depth[a] >= setone$maxContour[a]){
              setone$matchContour[a] <- "diffmatch"
            }
          }
        }
      } 
      #rm(a)
    }
   
    if(mn == 0){
      settwo <- setone
    }
    
    if(mn > 0){
      settwo <- rbind(settwo, setone)
    }
    
    mn <- mn + 500
    mx <- mx + 500
    
  }
  
  assign(gsub(" ","",paste(namesShallowDeep[i], "_diffmatch")),settwo)  
  #rm(x,y,a, setone, setwo)
  #rm(z)
}

#To plot, these are the keeping objects and the labels for the years
#namesShallowPlotbu <- namesShallowPlot
namesShallowPlot <- "shallow_diffmatch"
#namesDeepPlotbu <- namesDeepPlot
namesDeepPlot <- "deep_diffmatch"
#namesShallowDeepPlotbu <- namesShallowDeepPlot
namesShallowDeepPlot <- c(namesShallowPlot,namesDeepPlot)

namesShallow <- gsub("shallow", "shallow_diffmatch_nodups", namesShallow)
namesDeep <- gsub("deep", "deep_diffmatch_nodups", namesDeep)

###End of the script

rm(yearini,yearend)
yearini <- 1900
yearend <- 1949
rm(a,i)
#for (a in 1:length(namesShallowDeepPlot)){
  #x <- get(namesShallowDeepPlot[a])
  #x <- x %>% filter(!is.na(year))
  #x2 <- x %>% filter(is.na(year))
x2 <- layer %>% filter(!is.na(year))
  #x2 <- anti_join(layer,dbs_mkd_taxa_new, by = "id")
  
  #if (!is.na(x$year)){
    for(i in 1:12){
      
    x <- layer %>% filter(!is.na(year))
    
      if(i == 1){
        x <- x %>% filter(year < yearini)
      }
      
      if(i == 2){
        x <- x %>% filter(year >= yearini & year < yearend)
        yearini <- yearini + 50
        yearend <- yearend + 10
      }
      
      if(i > 2 & i < 7){
        x <- x %>% filter(year >= yearini & year < yearend)
        yearini <- yearini + 10
        yearend <- yearend + 10
      }
      
      if(i == 7){
        x <- x %>% filter(year >= yearini & year < yearend)
        yearini <- yearini + 10
        yearend <- yearend + 5
      }
      
      if(i > 7 & i < 12){
        x <- x %>% filter(year >= yearini & year < yearend)
        yearini <- yearini + 5
        yearend <- yearend + 5
      }
      
      if(i == 12){
        x <- x %>% filter(year >= yearini)
      }
    
      #if(a == 1){  
       # previous <- get(namesShallow[i])
        #new <- rbind(previous,x)
        #assign(gsub(" ","",paste(namesShallow[i], "_emodnet")),new)
        #newshallow <- new
      #}
      
      #if(a == 2){  
       # previous <- get(namesDeep[i])
        #new <- rbind(previous,x)
        #assign(gsub(" ","",paste(namesDeep[i], "_emodnet")),new)
        #newall <- rbind(newshallow,new)
      #}
    
      assign(gsub(" ","",paste("emodnet",i)),x) 
    }
  #}

#}



shallow

##Merge per time series

for 






















#From script 3c (new one)

#IV. Removing duplicates + splitting in latitudes (if the input is a period of the time-series and the output is no-duplicates per latitudinal band for this period)
#Reccommended to pass many times to not to leave duplicates (seems that they remain a bit?...)

e <- 1
l <- 0
test <- c()

#splitting by latitudinal bands every degree and filtering out duplicates
rm(i)
for(i in 56:84){
  
  if (i < 61){
    for (j in 1:4) {
      l <- letters[j]
      test[e] <- gsub(" ","", paste("l",i,l))
      e = e +1
    }
  }
  
  else {
    l <- letters[j]
    test[e] <- gsub(" ","", paste("l",i))
    e = e +1
  }
}

rm(b,x)
b <- 1
srichness_ts <- c()
abundances_ts <- c()
occurrences_ts <- c()

for (b in 1:length(namesShallowDeepPlot)){
  f <- 1
  k <- 1
  m <- 1
  p <- 1
  init <- 55.95
  
  i <- 1
  mn <- 0
  mx <- 500
  
  for (i in 1:length(test)){
    
    mn <- 0
    mx <- 500
    
    if (i < 21) {
      x <- get(namesShallowDeepPlot[b]) %>% filter(YCoord>= (init + 0.05) & YCoord< (init + (0.05 + 0.25)))
      assign(test[i], x)
      init <- init + 0.25
    }
    
    if (i > 20 & i < 44) {
      x <- get(namesShallowDeepPlot[b]) %>% filter(YCoord>= (init + 0.05) & YCoord< (init + (0.05 + 1.00)))
      assign(test[i], x)
      init <- init + 1.00
    }  
    
    if (i == 44) {
      x <- get(namesShallowDeepPlot[b]) %>% filter(YCoord>= (init + 0.05) & YCoord<= (init + (0.05 + 1.00)))
      assign(test[i], x)
      init <- init + 1.00
    }
    
    g = x %>% filter(taxonRank == "FORM" | taxonRank == "Species" | taxonRank == "SPECIES" | taxonRank == "SUBSPECIES" | taxonRank == "UNRANKED" | taxonRank == "VARIETY" | is.na(taxonRank))
    assign(gsub(" ","", paste(test[i],"_sp")),g)
    
    df <- g
    df2 <- g
    k <- k + 1
    mylist <- list()
    link <- data.frame()
    
    while(k > 0){
      x <- print(df %>% filter(duplicated(df$YCoord) & duplicated(df$XCoord) & duplicated(df$depth) & duplicated(df$day) & duplicated(df$month) & duplicated(df$year) & duplicated(df$scientificName) & !duplicated (df$database)))
      #df <- anti_join(df, x, by = NULL)
      df = df[!(duplicated(df$YCoord) & duplicated(df$XCoord) & duplicated(df$depth) & duplicated(df$day) & duplicated(df$month) & duplicated(df$year) & duplicated(df$scientificName) & !duplicated (df$database)),]
      k <- nrow(x)
      mylist[[f]] <- x
      link <- do.call("rbind",mylist)
      f <- (nrow(link)) + 100
      assign(gsub(" ","",paste(test[i],"_sp_dups")), link)
    }
    
    if(i == 1){
      spp_level <- nrow(g)
      nodups <- as.data.frame(df)
    }
    
    if(i > 1){
      spp_level <- spp_level + nrow(g)
      nodups <- rbind(nodups,as.data.frame(df))
    }
    
    if(i == 44){
      #Generate the datataset with no duplicates
      assign(gsub(" ","",paste(namesShallowDeepPlot[b],"_nodups")), nodups)
      
      sp_list_abundances <- nodups %>% arrange(scientificName) %>% group_by(scientificName, kingdom, class, family) %>% summarise(abundance = sum(individualCount)) %>% filter(grepl("[a-zA-Z]{1,25}\\s{1}[a-z]{2,25}", scientificName))
      sp_list <- sp_list_abundances[c("scientificName","abundance")] %>% arrange(scientificName) %>% group_by(scientificName) %>% summarise(abundance = sum(abundance))
      
      #quantification of species richness
      srichness <- nrow(sp_list)
      
      #quantification of abundances
      abundances <- sum(sp_list$abundance)
      
      #quantification of occurrences
      occurrences <- nrow(nodups)
    }
  }  
  
  #Here the generation for srichness, abundances and occurrences per time slot, per depth
  
  srichness_ts[b] <- srichness
  abundances_ts[b] <- abundances
  occurrences_ts[b] <- occurrences
}

rm(all)
rm(a,e,f,k,h,l,m,p,z)
rm(i,b)

#save.image("//home.ansatt.ntnu.no/lcgarcia/Documents/R/1900_23_allmaskingandnodups.RData")

#For plots

namesShallowNodups <- gsub("shallow_diffmatch", "shallow_diffmatch_nodups", namesShallowPlot)
namesDeepNodups <- gsub("deep_diffmatch", "deep_diffmatch_nodups", namesDeepPlot)
namesShallowDeepNodups <- c(namesShallowNodups,namesDeepNodups)








#Dividing EMODnet in depth intervals 
rm(i,x)
for(i in 1:12){
  x <- layer %>% filter()
}
  







##################################

#After: PLOTS

#Plots for intervals
#############
#For shallow
rm(i)
plotsShallow <- c()
for (i in 7:length(namesShallowPlot)){
  
  #to prepare the 1xxx_1899 with only coordinates to plot it
  if(i == 1){
    dbs_mkd_taxa_new1xxx_1899_coordinated <- get(namesShallowPlot[i]) %>% filter(XCoord != 0 | YCoord !=0)
    sf <- st_as_sf(x = dbs_mkd_taxa_new1xxx_1899_coordinated,                         
                   coords = c("XCoord", "YCoord"),
                   crs = 4326)
  }
  
  if(i > 1){
    sf <- st_as_sf(x = get(namesShallowPlot[i]),                         
                   coords = c("XCoord", "YCoord"),
                   crs = 4326)
  }
  
  plotsShallow[i] <- gsub(" ","", paste(namesShallow[i],"_plot"))
  
  sf <- sf %>% arrange(matchContour)
  
  plot_x <- 
    ggplot(data = world) +
    #ggplot(data = sf) +
    geom_sf() +
    geom_sf(data = sf, aes(color = matchContour), size = 0.001) +
    scale_color_manual(values=c("blue", "turquoise3")) +
    #geom_point(aes(group = matchContour, size = 0.1)) +
    #annotation_scale(location = "bl", width_hint = 0.5) +
    #annotation_north_arrow(location = "bl", which_north = "true", 
              #pad_x = unit(0.75, "in"), pad_y = unit(0.5, "in"),
              #style = north_arrow_fancy_orienteering) +
    theme(legend.position="none") +
    coord_sf(xlim = c(-27, 38), ylim = c(56, 85)) +
    ggtitle(yearsLabels[i])
  assign(gsub(" ","", paste(namesShallow[i],"_plot")),plot_x)
}
rm(i)

library(cowplot)
#plots shallow

plot_grid1 <- plot_grid(dbs_mkd_taxa_new1xxx_1899_shallow_plot, dbs_mkd_taxa_new1900_49_shallow_plot, dbs_mkd_taxa_new1950_59_shallow_plot, dbs_mkd_taxa_new1960_69_shallow_plot, dbs_mkd_taxa_new1970_79_shallow_plot,
          dbs_mkd_taxa_new1980_89_shallow_plot, ncol = 2)

#ggsave(plot_grid1, file="plot_grid1.jpeg", units = c("px"), width = 1000, height = 1500)

plot_grid2 <- plot_grid(dbs_mkd_taxa_new1990_99_shallow_plot, dbs_mkd_taxa_new2000_04_shallow_plot, dbs_mkd_taxa_new2005_09_shallow_plot, dbs_mkd_taxa_new2010_14_shallow_plot, dbs_mkd_taxa_new2015_19_shallow_plot, 
          dbs_mkd_taxa_new2020_23_shallow_plot, ncol = 2)

#ggsave(plot_grid2, file="plot_grid2.jpeg", units = c("px"), width = 1000, height = 1500)

# for deep
rm(i)
plotsDeep <- c()
for (i in 1:length(namesDeepPlot)){
  
  #to prepare the 1xxx_1899 with only coordinates to plot it
  if(i == 1){
    dbs_mkd_taxa_new1xxx_1899_coordinated <- get(namesDeepPlot[i]) %>% filter(XCoord != 0 | YCoord !=0)
    sf <- st_as_sf(x = dbs_mkd_taxa_new1xxx_1899_coordinated,                         
                   coords = c("XCoord", "YCoord"),
                   crs = 4326)
  }
  
  if(i > 1){
    sf <- st_as_sf(x = get(namesDeepPlot[i]),                         
                   coords = c("XCoord", "YCoord"),
                   crs = 4326)
  }
  
  plotsDeep[i] <- gsub(" ","", paste(namesDeep[i],"_plot"))
  
  sf <- sf %>% arrange(matchContour)
    
  plot_x <- 
    ggplot(data = world) +
    #ggplot(data = sf) +
    geom_sf() +
    geom_sf(data = sf, aes(color = matchContour), size = 0.001) +
    scale_color_manual(values=c("gold2", "red", "turquoise3", "black")) +
    #geom_point(aes(group = matchContour, size = 0.1)) +
    #annotation_scale(location = "bl", width_hint = 0.5) +
    #annotation_north_arrow(location = "bl", which_north = "true", 
                          #pad_x = unit(0.75, "in"), pad_y = unit(0.5, "in"),
                         #style = north_arrow_fancy_orienteering) +
    theme(legend.position="none") +
    coord_sf(xlim = c(-27, 38), ylim = c(56, 85)) +
    ggtitle(yearsLabels[i])
  assign(gsub(" ","", paste(namesDeep[i],"_plot")),plot_x)
}
rm(i)

library(cowplot)
#plots deep

plot_grid3 <- plot_grid(dbs_mkd_taxa_new1xxx_1899_deep_plot, dbs_mkd_taxa_new1900_49_deep_plot, dbs_mkd_taxa_new1950_59_deep_plot, dbs_mkd_taxa_new1960_69_deep_plot, dbs_mkd_taxa_new1970_79_deep_plot, 
          dbs_mkd_taxa_new1980_89_deep_plot, ncol = 2)

#ggsave(plot_grid3, file="plot_grid3.jpeg", width = 1000, height = 1500)

plot_grid4 <-plot_grid(dbs_mkd_taxa_new1990_99_deep_plot, dbs_mkd_taxa_new2000_04_deep_plot, dbs_mkd_taxa_new2005_09_deep_plot, dbs_mkd_taxa_new2010_14_deep_plot, dbs_mkd_taxa_new2015_19_deep_plot, 
          dbs_mkd_taxa_new2020_23_deep_plot, ncol = 2)

#ggsave(plot_grid4, file="plot_grid4.jpeg", width = 1000, height = 1500)

#Plots for oceanic provinces
#############
#For shallow: no need with depth per contours

# for deep
rm(i)
plotsDeep <- c()
for (i in 1:length(namesDeepPlot)){
  
  #to prepare the 1xxx_1899 with only coordinates to plot it
  if(i == 1){
    dbs_mkd_taxa_new1xxx_1899_coordinated <- get(namesDeepPlot[i]) %>% filter(XCoord != 0 | YCoord !=0)
    sf <- st_as_sf(x = dbs_mkd_taxa_new1xxx_1899_coordinated,                         
                   coords = c("XCoord", "YCoord"),
                   crs = 4326)
  }
  
  if(i > 1){
    sf <- st_as_sf(x = get(namesDeepPlot[i]),                         
                   coords = c("XCoord", "YCoord"),
                   crs = 4326)
  }
  
  plotsDeep[i] <- gsub(" ","", paste(namesDeep[i],"_plot"))
  
  sf <- sf %>% arrange(matchContour)
  
  
  if (length(unique(get(namesDeepPlot[i])$oProvince)) == 4){
    plot_x <- 
      ggplot(data = world) +
      geom_sf() +
      geom_sf(data = sf, aes(color = oProvince), size = 0.001) +
      scale_color_manual(values=c("green", "purple3", "white", "orange")) +
      theme(legend.position="none") +
      coord_sf(xlim = c(-27, 38), ylim = c(56, 85)) +
      ggtitle(yearsLabels[i])
  }
  
  if (length(unique(get(namesDeepPlot[i])$oProvince)) == 3){
    plot_x <- 
      ggplot(data = world) +
      geom_sf() +
      geom_sf(data = sf, aes(color = oProvince), size = 0.001) +
      scale_color_manual(values=c("purple3", "white", "orange")) +
      theme(legend.position="none") +
      coord_sf(xlim = c(-27, 38), ylim = c(56, 85)) +
      ggtitle(yearsLabels[i])
  }
  
  assign(gsub(" ","", paste(namesDeep[i],"_plot")),plot_x)
}
rm(i)

library(cowplot)
#plots deep

plot_grid3op <- plot_grid(dbs_mkd_taxa_new1xxx_1899_deep_plot, dbs_mkd_taxa_new1900_49_deep_plot, dbs_mkd_taxa_new1950_59_deep_plot, dbs_mkd_taxa_new1960_69_deep_plot, dbs_mkd_taxa_new1970_79_deep_plot, 
                        dbs_mkd_taxa_new1980_89_deep_plot, ncol = 2)

#ggsave(plot_grid3, file="plot_grid3.jpeg", width = 1000, height = 1500)

plot_grid4op <-plot_grid(dbs_mkd_taxa_new1990_99_deep_plot, dbs_mkd_taxa_new2000_04_deep_plot, dbs_mkd_taxa_new2005_09_deep_plot, dbs_mkd_taxa_new2010_14_deep_plot, dbs_mkd_taxa_new2015_19_deep_plot, 
                       dbs_mkd_taxa_new2020_23_deep_plot, ncol = 2)

#ggsave(plot_grid4, file="plot_grid4.jpeg", width = 1000, height = 1500)

#save.image("//home.ansatt.ntnu.no/lcgarcia/Documents/R/1900_23_dfforPlot.RData")




